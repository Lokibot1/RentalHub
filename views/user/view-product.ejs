<link rel="stylesheet" href="/css/view-product.css"/>


<!--Navigation Bar-->
<nav>
    <a href="/">
        <div class="logo">
            <h1>Rental <span> Hub</span></h1>
        </div>
    </a>
    <ul>
        <li><a href="/shopping/events-and-parties">Shop</a></li>
        <li>
            <a href="/user/listing"><img src="/images/WhiteAdd.png" class="add-icon"/></a>
        </li>
        <li>
            <% if (isAuthenticated && role === 'admin' ) { %>
                <a href='/admin/admin-dashboard'>
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } else if (isAuthenticated && role === 'user' ) { %>
                <a href='/user/profile'>
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } else { %>
                <a href="/login">
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } %>
        </li>
    </ul>
</nav>
<br/><br/><br/><br/>
<!-- Main container for product view -->
<div class="view-product-container">
    <!-- Left Section: Product Image + Details (Stacked) -->
    <div class="left-section">
        <!-- Product Image -->
        <div class="product-image">
            <img id="product-image" src="" alt="Product Image"/>
        </div>

        <!-- Product Details -->
        <div class="product-details">
            <label>Name of product:</label>
            <p id="product-name"></p>

            <label>Price per day:</label>
            <p id="product-price"></p>

            <label>No. of Item Quantity:</label>
            <p id="product-quantity"></p>

            <label>Item Description:</label>
            <p id="product-description"></p>
        </div>

        <!-- Owner Info -->
        <div class="owner-info" onclick="openForm()">
            <h2>Posted by</h2>
            <hr/>
            <div class="owner-details">
                <div class="pfp">
                    <img id="owner-image" src="" alt="Owner Image"/>
                </div>
                <div>
                    <strong id="owner-name">Loading...</strong><br/>
                    <span id="owner-location">Loading...</span> <br/>
                    <span id="owner-rating">⭐ Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Owner Information -->
    <div id="myForm">
        <button class="close-btn" onclick="closeForm()">X</button>

        <!--Profile Details-->
        <div class="side-profile">
            <div class="profile">
                <img id="profile-image" src="" alt=""/>
            </div>
            <hr/>
            <h3 id="owners-fullname">*Owner's Name*</h3>
            <p id="contact-number">*Contact Info*</p>
            <p id="social-media">*Social Media Link*</p>
            <p id="location">*Location*</p>
            <p>*Rating*</p>
        </div>

        <!-- Right Side-->
        <div class="side-info">
            <div class="tabs">
                <button class="tab-btn active" onclick="switchTab(event, 'items')">
                    Items
                </button>
                <button class="tab-btn" onclick="switchTab(event, 'reviews')">
                    Reviews
                </button>
            </div>
            <div class="content">
                <div id="items" class="tab-content active">
                    <p>Items content goes here...</p>
                </div>
                <div id="reviews" class="tab-content">
                    <p>Reviews content goes here...</p>
                </div>
            </div>
        </div>
    </div>
    <!-- Right Section: Rental Options -->
    <div class="rental-options">
        <form id="rent-form">
            <h3 class="pickdate" id="pickdate">Pick Date</h3>
            <div class="calendar">
                <div class="month">
                    <a href="#" id="prev-month" class="nav">&lt;</a>
                    <div id="month-year">February 2025</div>
                    <a href="#" id="next-month" class="nav">&gt;</a>
                </div>
                <div class="days">
                    <span>Sun</span>
                    <span>Mon</span>
                    <span>Tue</span>
                    <span>Wed</span>
                    <span>Thu</span>
                    <span>Fri</span>
                    <span>Sat</span>
                </div>
                <div id="dates-grid" class="dates">
                    <!-- Dates will be rendered here -->
                </div>
            </div>
            <div class="quantity-container">
                <strong>Qty</strong>
                <button type="button" onclick="changeQuantity(-1)">-</button>
                <input type="number" id="quantity" name="rental_quantity" value="1" min="1">
                <button type="button" onclick="changeQuantity(1)">+</button>
            </div>
            <h3 class="mod">Mode of Payment</h3>
            <div class="delivery-options">
                <button type="button" id="meetup-btn">Meet Up</button>
                <button type="button" id="delivery-btn">Delivery</button>
            </div>

            <% if (isAuthenticated && role === 'admin' || role === 'user' ) { %>
                <button type="submit" id="request-btn">Request</button>
            <% } else { %>
                <a href="/login?redirect=/user/view-product" class="request-btn">
                    Request
                </a>
            <% } %>
        </form>
    </div>
</div>

<script>
    let selectedItem = null;

    // Open Form (Show overlay & form)
    async function openForm() {
        const item = JSON.parse(localStorage.getItem("selectedItem"))
        const response = await fetch(`http://localhost:8000/api/user/view-product/posted-by/${item.id}`)
        const data = await response.json()
        const { id, profile_image, owner, contact_number, social_media, location } = data.data

        document.querySelector('#profile-image').src = `/uploads/${profile_image}`
        document.querySelector('#owners-fullname').textContent = owner
        document.querySelector('#contact-number').textContent = contact_number
        document.querySelector('#social-media').textContent = social_media
        document.querySelector('#location').textContent = location

        document.getElementById("myForm").style.display = "flex";
    }

    // Close Form (Hide overlay & form)
    function closeForm() {
        document.getElementById("myForm").style.display = "none";
    }

    // Switch Tabs
    function switchTab(event, tabName) {
        // Remove active class from all buttons
        document
            .querySelectorAll(".tab-btn")
            .forEach((btn) => btn.classList.remove("active"));

        // Hide all content sections
        document
            .querySelectorAll(".tab-content")
            .forEach((content) => content.classList.remove("active"));

        // Add active class to the clicked button
        event.currentTarget.classList.add("active");

        // Show the selected tab content
        document.getElementById(tabName).classList.add("active");
    }

    // Function to load the selected product details
    function loadSelectedProduct() {
        selectedItem = JSON.parse(localStorage.getItem("selectedItem"));
        if (selectedItem) {
            document.getElementById("product-image").src =
                selectedItem.image || "default.jpg";
            document.getElementById("product-name").innerText = selectedItem.name;
            document.getElementById(
                "product-price"
            ).innerText = `Price per day: ₱${selectedItem.price}`;
            document.getElementById("product-description").innerText =
                selectedItem.description;

            document.getElementById("product-quantity").innerText =
                selectedItem.quantity;
            document.querySelector("[name='rental_quantity']")
                .setAttribute('max', selectedItem.quantity)

            // Owner Info
            document.getElementById("owner-name").textContent =
                selectedItem.name || "Unknown Owner";

            document.querySelector('#owner-image').src = `/uploads/${selectedItem.profile_image}`
            document.querySelector('#owner-name').textContent = selectedItem.owner

            document.getElementById("owner-location").textContent =
                selectedItem.location || "Unknown Location";
        } else {
            alert("No product selected!");
            window.location.href = ".shopping";
        }
    }

    // Call function when page loads
    loadSelectedProduct()


    // Function to convert rating number to stars
    function generateStars(rating) {
        if (rating === "No Ratings") return rating;
        let stars = "⭐".repeat(Math.floor(rating)); // Full stars
        return stars + ` (${rating})`; // Show the average rating value
    }

    //CALENDRRRRRRRRRRRRRRRRRRRRRRRRRRRR
    //calendar functionssssss
    document.addEventListener("DOMContentLoaded", function () {
        const datesGrid = document.getElementById("dates-grid");
        const monthYearDisplay = document.getElementById("month-year");
        const prevMonthBtn = document.getElementById("prev-month");
        const nextMonthBtn = document.getElementById("next-month");

        const instructionText = document.createElement("p");
        instructionText.id = "instruction-text";
        instructionText.textContent = "Select a start date for your rental.";
        datesGrid.parentElement.appendChild(instructionText);

        const resetBtn = document.createElement("button");
        resetBtn.id = "reset-selection";
        resetBtn.textContent = "Reset Selection";
        resetBtn.style.marginTop = "10px";
        resetBtn.style.display = "none";
        datesGrid.parentElement.appendChild(resetBtn);

        let currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        let displayedMonth = currentDate.getMonth();
        let displayedYear = currentDate.getFullYear();
        let startDate = null;
        let endDate = null;

        const unavailableDates = [];

        function renderCalendar() {
            datesGrid.innerHTML = "";
            instructionText.textContent = "Select a start date for your rental.";
            resetBtn.style.display = "none";

            const firstDay = new Date(displayedYear, displayedMonth, 1);
            const lastDay = new Date(displayedYear, displayedMonth + 1, 0);
            const startingDay = firstDay.getDay();
            const monthLength = lastDay.getDate();

            monthYearDisplay.textContent = `${firstDay.toLocaleString("default", {
                month: "long",
            })} ${displayedYear}`;

            for (let i = 0; i < startingDay; i++) {
                const emptyCell = document.createElement("div");
                emptyCell.className = "empty-cell";
                datesGrid.appendChild(emptyCell);
            }

            for (let day = 1; day <= monthLength; day++) {
                const dateCell = document.createElement("div");
                dateCell.className = "date-cell";
                dateCell.textContent = day;

                const cellDate = new Date(displayedYear, displayedMonth, day);
                cellDate.setHours(0, 0, 0, 0);

                //Use locale date format to prevent timezone shift issues
                dateCell.dataset.date = cellDate.toLocaleDateString("en-CA");

                if (cellDate < currentDate) {
                    dateCell.classList.add("disabled");
                } else if (unavailableDates.includes(dateCell.dataset.date)) {
                    dateCell.classList.add("unavailable");
                } else {
                    dateCell.addEventListener("click", () =>
                        handleDateSelection(dateCell.dataset.date, dateCell)
                    );
                }

                datesGrid.appendChild(dateCell);
            }

            highlightSelectedDates();
        }

        function handleDateSelection(dateStr, cell) {
            // Convert dataset string back to Date consistently
            const selectedDate = new Date(dateStr);
            selectedDate.setHours(0, 0, 0, 0);

            if (selectedDate < currentDate || unavailableDates.includes(dateStr)) {
                return;
            }

            if (!startDate) {
                startDate = selectedDate;
                instructionText.textContent =
                    "Now select an end date for your rental.";
                resetBtn.style.display = "block";
                highlightSelectedDates();
            } else if (!endDate && selectedDate >= startDate) {
                endDate = selectedDate;
                instructionText.textContent = `Rental period: ${formatDate(
                    startDate
                )} to ${formatDate(endDate)}.`;
                highlightSelectedDates();
            } else {
                resetSelection();
            }
        }

        function highlightSelectedDates() {
            document.querySelectorAll(".date-cell").forEach((cell) => {
                const cellDate = new Date(cell.dataset.date);
                cellDate.setHours(0, 0, 0, 0);

                cell.classList.remove("selected", "range");

                if (startDate && cellDate.getTime() === startDate.getTime()) {
                    cell.classList.add("selected");
                }
                if (endDate && cellDate.getTime() === endDate.getTime()) {
                    cell.classList.add("selected");
                }
                if (
                    startDate &&
                    endDate &&
                    cellDate > startDate &&
                    cellDate < endDate
                ) {
                    cell.classList.add("range");
                }
            });
        }

        function resetSelection() {
            startDate = null;
            endDate = null;
            instructionText.textContent = "Select a start date for your rental.";
            resetBtn.style.display = "none";
            highlightSelectedDates();
        }

        prevMonthBtn.addEventListener("click", (e) => {
            e.preventDefault();
            if (
                displayedYear > currentDate.getFullYear() ||
                (displayedYear === currentDate.getFullYear() &&
                    displayedMonth > currentDate.getMonth())
            ) {
                displayedMonth--;
                if (displayedMonth < 0) {
                    displayedMonth = 11;
                    displayedYear--;
                }
                renderCalendar();
            }
        });

        nextMonthBtn.addEventListener("click", (e) => {
            e.preventDefault();
            displayedMonth++;
            if (displayedMonth > 11) {
                displayedMonth = 0;
                displayedYear++;
            }
            renderCalendar();
        });

        resetBtn.addEventListener("click", resetSelection);

        function formatDate(date) {
            return date.toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
            });
        }

        renderCalendar();
    });

    //PRESSED FUNCTION SA Mode of Payment
    document.addEventListener("DOMContentLoaded", function () {
        const meetupBtn = document.getElementById("meetup-btn");
        const deliveryBtn = document.getElementById("delivery-btn");

        function addPressEffect(button) {
            button.classList.add("pressed");

            // Keep the effect for 200ms before removing it
            setTimeout(() => {
                button.classList.remove("pressed");
            }, 200);
        }

        meetupBtn.addEventListener("click", function () {
            addPressEffect(meetupBtn);
        });

        deliveryBtn.addEventListener("click", function () {
            addPressEffect(deliveryBtn);
        });
    });

    //FUNCTION FOR REQUEST BUTTON!!!!
    document.addEventListener("DOMContentLoaded", function () {
        const requestBtn = document.getElementById("request-btn");
        const meetupBtn = document.getElementById("meetup-btn");
        const deliveryBtn = document.getElementById("delivery-btn");

        let selectedDeliveryMethod = null;

        // Get access to the calendar's date variables
        const calendar = document.querySelector(".calendar");

        // Handle delivery method selection
        meetupBtn.addEventListener("click", function () {
            selectedDeliveryMethod = "meetup";
            meetupBtn.classList.add("selected");
            deliveryBtn.classList.remove("selected");
        });

        deliveryBtn.addEventListener("click", function () {
            selectedDeliveryMethod = "delivery";
            deliveryBtn.classList.add("selected");
            meetupBtn.classList.remove("selected");
        });

        // ✅ Handle Request Button Click
        requestBtn.addEventListener("click", function (event) {
            event.preventDefault()

            // Get the selected dates from the calendar
            const selectedDates = document.querySelectorAll(".date-cell.selected");
            const instructionText = document.getElementById("instruction-text");

            // Check if two dates are selected
            if (selectedDates.length < 2) {
                showErrorMessage(
                    "Please select both start and end dates for your rental period."
                );
                return;
            }

            // Get the actual dates
            const startDateStr = selectedDates[0].dataset.date;
            const endDateStr = selectedDates[1].dataset.date;
            startDate = new Date(startDateStr);
            endDate = new Date(endDateStr);

            // Check if dates are in proper order
            if (endDate < startDate) {
                showErrorMessage("End date cannot be before start date.");
                return;
            }

            // Check if delivery method is selected
            if (!selectedDeliveryMethod) {
                showErrorMessage(
                    "Please select a mode of delivery (Meet Up or Delivery)."
                );
                return;
            }

            // If all checks pass, show confirmation modal
            showConfirmationModal(startDate, endDate, selectedDeliveryMethod);
        });

        // Function to show confirmation modal
        function showConfirmationModal(startDate, endDate, deliveryMethod,) {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.innerHTML = `
              <p><strong>Confirm rental request for: </strong><br>
              <strong>From:</strong> ${formatDate(startDate)}<br>
              <strong>To:</strong> ${formatDate(endDate)}<br>
              <strong>Payment Method:</strong> ${deliveryMethod}</p><br>
                        <h3>Terms and Condition</h3>
                        <div class="terms-and-conditions">
    <p>
      <strong>1. General Terms: </strong>
      Both renters and owners accept these terms and conditions when they
      confirm a rental on Rental Hub. These conditions guarantee dependable,
      safe, and easy transactions for both sides. Rental Hub may update or
      modify these terms at any time.
    </p>
    <p>
      <strong>2. Responsibilities of Owners: </strong>
      Owners must provide items in good condition with accurate descriptions and
      images. Any pre-existing issues must be disclosed before handing over the
      item. Owners should verify renter identities before confirming
      transactions. Security deposits, if required, should be managed
      professionally and refunded upon safe return of the item. Owners may
      decline rentals from unreliable users with valid reasons.
    </p>
    <p>
      <strong>3. Responsibilities of Renters: </strong>
      When products are delivered, renters are required to check them over and
      report any inconsistencies right away. Items must be used appropriately
      and promptly returned in their original state. Additional costs or
      deductions from the security deposit may be incurred for late returns,
      damages, or losses. In the event of unforeseen problems or rental
      extensions, renters must speak with the proprietors.
    </p>
    <p>
      <strong>4. Penalties for Damages: </strong>
      Major Damage and Irreversible Damage: Renters will be charged thrice (3x)
      the listed price of the product as compensation. 
      <br><strong>Classification: Major damage </strong>
      includes severe physical damage that affects the item's
      functionality, structural integrity, or overall usability. This includes
      but is not limited to: Cracked or broken parts that prevent normal use
      Water or fire damage Permanent stains or deformations that cannot be
      repaired Any modification or alteration that changes the original
      condition of the item 
      <br><strong>Minor Damage: </strong>Renters will be charged 50% of the
      listed price for inconvenience. Classification: Minor damage includes
      cosmetic issues that do not affect the functionality but reduce the item's
      quality or appearance. This includes but is not limited to: Scratches,
      small dents, or scuff marks Minor stains that can be cleaned Loose or
      slightly damaged parts that do not hinder proper use
    </p>
    <p>
      <strong>5. Dispute Resolution: </strong>
      Disagreements on item condition, security deposits, or late fees should
      first be resolved between both parties. If unresolved, Rental Hub’s
      support team will review available evidence such as rental agreements,
      item photos, and chat logs. Rental Hub’s final decision on disputes will
      be binding.
    </p>
    <p>
      <strong>6. Liability Disclaimer: </strong>
      While Rental Hub makes rentals easier, it cannot guarantee the
      functionality, safety, or quality of the items. It is the duty of both
      landlords and tenants to make sure that transactions are equitable and
      seamless. Outside of its platform, Rental Hub is not responsible for any
      losses, damages, or conflicts.
    </p>
    <p>
      <strong>7. Acceptance of Terms: </strong>
      Users acknowledge that they have read, understood, and agreed to these
      terms by confirming a rental on Rental Hub. Non-compliance may result in
      account suspension or penalties.
    </p>
  </div>
              <div class="modal-buttons">
                  <button id="confirm-btn">Yes</button>
                  <button id="cancel-btn">No</button>
              </div>
          `;

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            // Add styles for modal
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            modal.style.backgroundColor = "white";
            modal.style.padding = "20px";
            modal.style.borderRadius = "15px";
            modal.style.minWidth = "300px";
            modal.style.Width = "80%";
            modal.style.maxWidth = "400px";
            modal.style.maxHeight = "80vh";
            modal.style.overflowY = "auto";
            modal.style.top = "50%";
            modal.style.left = "50%";
            modal.style.textAlign = "justify";
            modal.querySelector(".modal-buttons").style.display = "flex";
            modal.querySelector(".modal-buttons").style.justifyContent = "center";
            h3 = modal.querySelector("h3");
            h3.style.textAlign = "center";
            

            document
                .getElementById("confirm-btn")
                .addEventListener("click", async function () {
                    console.log("Rental confirmed!");
                    document.body.removeChild(modalOverlay);

                    // Process the data here
                    const rentForm = document.querySelector('#rent-form')
                    const formData = new FormData(rentForm)
                    let formObject = {};  // Initialize an empty object to store form data

                    // Loop through the form data and build the object
                    for (let [key, value] of formData.entries()) {
                        // Check if the key corresponds to a select element
                        const selectElement = rentForm.querySelector(`[name="${key}"]`);
                        if (selectElement && selectElement.tagName === 'SELECT') {
                            // Get the selected option's text content
                            const selectedOption = selectElement.options[selectElement.selectedIndex];
                            formObject[key] = selectedOption.textContent;  // Use the text content for select elements
                        } else {
                            // For other form elements, use the value
                            formObject[key] = value;
                        }
                    }

                    // Add data from current localStorage item
                    const selectedItem = localStorage.getItem('selectedItem')

                    startDate = new Date(startDate);
                    const formattedStartDate = startDate.toISOString().split('T')[0];
                    endDate = new Date(endDate);
                    const formattedEndDate = endDate.toISOString().split('T')[0];

                    formObject = {
                        ...formObject,
                        start_date: formattedStartDate,
                        end_date: formattedEndDate,
                        mode_of_delivery: selectedDeliveryMethod,
                        ...JSON.parse(selectedItem),
                        renter_id: "<%= renter_id %>"
                    }

                    try {
                        const response = await fetch(`/api/user/my-requests`, {
                            method: "POST",
                            headers: {"Content-Type": "application/json"},
                            body: JSON.stringify(formObject)
                        });
                        if (response.ok) {
                            alert("Requesting to rent item in-progress...");
                            setTimeout(() => {
                                window.location.href = '/shopping/events-and-parties'
                            }, 2000)
                        }
                    } catch (error) {
                        console.error("Error canceling rent:", error);
                    }

                    console.log('formObject:', formObject)

                    showSuccessMessage();
                });

            document
                .getElementById("cancel-btn")
                .addEventListener("click", function () {
                    console.log("Rental canceled.");
                    document.body.removeChild(modalOverlay);
                });
        }

        // Function to show success message modal
        function showSuccessMessage() {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.style.backgroundColor = "#f5f5f5";
            modal.style.padding = "20px";
            modal.style.borderRadius = "30px";
            modal.style.border = "3px solid #009959";
            modal.style.fontWeight = "bold";
            modal.style.fontSize = "30px";
            modal.style.fontFamily = "Poppins, sans-serif";
            modal.innerHTML = `<p>Rental request submitted successfully!</p>`;
            modal.style.width = "40%";

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            setTimeout(() => {
                document.body.removeChild(modalOverlay);
            }, 2000);
        }

        // Function to show error message modal
        function showErrorMessage(message) {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.style.backgroundColor = "#ffe6e6";
            modal.style.padding = "20px";
            modal.style.borderRadius = "8px";
            modal.innerHTML = `<p>${message}</p>`;

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            setTimeout(() => {
                document.body.removeChild(modalOverlay);
            }, 2000);
        }

        // Helper function to format date
        function formatDate(date) {
            return date.toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
            });
        }
    });

    //qty counter
    function changeQuantity(amount) {
        let qtyInput = document.getElementById("quantity");
        let currentQty = parseInt(qtyInput.value);
        let maxQty = parseInt(qtyInput.getAttribute("max")) || Infinity; // Get max value or set it to Infinity if not defined

        let newQty = currentQty + amount;

        if (newQty < 1) {
            newQty = 1;
        } else if (newQty > maxQty) {
            newQty = maxQty;
        }

        qtyInput.value = newQty;
    }

</script>