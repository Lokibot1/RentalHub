<link rel="stylesheet" href="/css/archives.css"/>
<link rel="web icon" type="png" href="/images/webicon.png">
<!--Navigation Bar-->
<%- include('../partials/user/header-navbar.ejs'); %>

<div class="main">
    <!--Sidebar-->
    <%- include('../partials/user/sidebar.ejs'); %>

    <!--Main Content-->
    <div class="content">
        <!--        <button id="restore-btn" class="restore-btn">Restore All</button>-->
        <!--        <pre><%= JSON.stringify(archivedItems, null, 2) %></pre>-->

        <div class="shoppingList">
            <% if (archivedItems.length > 0) { %>
                <% archivedItems.forEach(function(item) { %>
                    <div class="shoppingItem1">
                        <img src="/uploads/<%= item.image %>" alt="" class="itemImage"/>
                        <hr/>
                        <p><strong class="itemName"><%= item.name %></strong></p>
                        <p><strong class="itemPrice">$<%= item.price %></strong></p>
                        <p><strong class="itemLocation"><%= item.location %></strong></p>
                        <button class="restore-btn" data-id="<%= item.id %>">Restore</button>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No archived items available.</p>
            <% } %>
        </div>
    </div>
    <!--Confirmation Modal-->
    <div id="overlay" class="overlay"></div>
    <div id="restore-Modal" class="modal">
        <div class="modal-content">
            <h3>
                Are you sure you want to
                <span style="color: #009959">restore</span> this item?
            </h3>
            <div class="modal-buttons" data-id="1">
                <button class="btn-yes" id="confirmBan">Yes</button>
                <button class="btn-no" id="cancelBtn">No</button>
            </div>
        </div>
    </div>
    <div id="restoreToast" class="toast"></div>
</div>

<!--JAVASCRIPT-->
<script>

    document.addEventListener("DOMContentLoaded", fetchArchivedListings);

    // FETCH ARCHIVED LISTINGS FROM THE BACKEND
    async function fetchArchivedListings() {
        try {
            const response = await fetch("/api/archived-listings");
            const listings = await response.json();
            const archiveList = document.getElementById("archive-list");

            archiveList.innerHTML = ""; // Clear previous content

            if (listings.length === 0) {
                archiveList.innerHTML = "<p>No archived items found.</p>";
                return;
            }

            listings.forEach((listing) => {
                const listingCard = document.createElement("div");
                listingCard.classList.add("listing-card");
                listingCard.innerHTML = `
            <p class="listing-title">${listing.title}</p>
            <div class="listing-item">
              <img src="${listing.image || 'placeholder.png'}" alt="Listing Image" class="listing-image">
              <span class="listing-name">${listing.name}</span>
            </div>
            <button class="restore-btn" onclick="restoreListing('${listing.id}')">Restore</button>
          `;
                archiveList.appendChild(listingCard);
            });
        } catch (error) {
            console.error("Error fetching archived listings:", error);
        }
    }

    // RESTORE A SINGLE LISTING
    async function restoreListing(listingId) {
        try {
            const response = await fetch(`/api/restore-listing/${listingId}`, {
                method: "PUT",
                headers: {"Content-Type": "application/json"},
            });
            if (response.ok) {
                alert("Listing restored successfully.");
                fetchArchivedListings();
            }
        } catch (error) {
            console.error("Error restoring listing:", error);
        }
    }

    // RESTORE ALL ARCHIVED LISTINGS
    async function restoreAllListings() {
        try {
            const response = await fetch(`/api/restore-all`, {
                method: "PUT",
                headers: {"Content-Type": "application/json"},
            });

            if (response.ok) {
                alert("All archived listings have been restored.");
                fetchArchivedListings();
            }
        } catch (error) {
            console.error("Error restoring all listings:", error);
        }
    }

    // Restore Posting
    document.addEventListener("DOMContentLoaded", function () {
        console.log("DOM fully loaded"); // Debugging step

        const restoreButtons = document.querySelectorAll(".restore-btn");
        const restoreModal = document.getElementById("restore-Modal");
        const confirmBan = document.getElementById("confirmBan");
        const restoreToast = document.getElementById("restoreToast");
        const overlay = document.getElementById("overlay");
        let currentItemId = null;

        console.log("Restore buttons found:", restoreButtons.length); // Debugging step

        // Attach click event to each restore button
        restoreButtons.forEach(button => {
            button.addEventListener("click", function (event) {
                event.preventDefault();
                event.stopPropagation();

                currentItemId = this.getAttribute("data-id"); // Get item ID

                restoreModal.style.display = "flex";
                overlay.style.display = "block";
            });
        });

        // Confirm Restore
        confirmBan.addEventListener("click", async function () {
            if (!currentItemId) {
                console.error("Error: No item selected for restoration.");
                return;
            }

            await fetch(`/api/user/archives/restore-item/${currentItemId}`, {
                method: "PATCH",
                headers: {"Content-Type": "application/json"},
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Error restoring item.");
                    } else {
                        console.log('Item restored successfully');
                        window.location.reload()
                    }
                })

            // Perform restore action (Replace this with an actual fetch request if needed)
            showRestoreToast("Item restored successfully!");

            restoreModal.style.display = "none";
            overlay.style.display = "none";
        });

        // Cancel Restore
        document.getElementById("cancelBtn").addEventListener("click", function () {
            restoreModal.style.display = "none";
            overlay.style.display = "none";
        });

        // Hide modal when clicking outside
        overlay.addEventListener("click", function (event) {
            if (event.target === overlay) {
                restoreModal.style.display = "none";
                overlay.style.display = "none";
            }
        });

        // Show toast message
        function showRestoreToast(message) {
            restoreToast.textContent = message;
            restoreToast.classList.add("show");
            setTimeout(() => {
                restoreToast.classList.remove("show");
            }, 3000);
        }
    });


    //logout
    document.addEventListener("DOMContentLoaded", function () {
        const logoutLink = document.getElementById("logout");
        const modal = document.getElementById("logout-modal");
        const confirmLogout = document.getElementById("confirm-logout");
        const cancelLogout = document.getElementById("cancel-logout");

        // Ensure modal starts hidden
        modal.style.display = "none";

        // Show modal when logout is clicked
        logoutLink.addEventListener("click", function (event) {
            event.preventDefault(); // Prevents default link behavior
            modal.style.display = "flex"; // Show modal only on click
        });

        // Redirect when "Yes" is clicked
        confirmLogout.addEventListener("click", function () {
            window.location.href = "/logout"; // Adjust logout URL
        });

        // Close modal when "No" is clicked
        cancelLogout.addEventListener("click", function () {
            modal.style.display = "none"; // Hide modal
        });
    });
</script>