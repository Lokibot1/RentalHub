<!-- Place here your css styles -->
<link rel="stylesheet" href="/css/shopping.css"/>
<link rel="web icon" type="png" href="images/webicon.png">
<!-- Body -->

<!--Navigation Bar-->
<nav>
    <a href="/">
      <div class="logo">
        <h1>Rental <span>Hub</span></h1>
      </div>
    </a>
  
    <div class="search-wrapper">
      <input
        type="search"
        id="search"
        placeholder="Search for items"
        class="search-input"
      />
      <button id="search-button" aria-label="Search">
        <img src="/images/wsearch.png" alt="Search icon" />
      </button>
    </div>
  
    <div
      class="hamburger"
      id="hamburger"
      aria-label="Toggle navigation"
      role="button"
      tabindex="0"
    >
      <span></span>
      <span></span>
      <span></span>
    </div>
  
    <ul id="nav-links">
      <li><a href="/">Home</a></li>
  
      <li>
        <% if (isAuthenticated && role === 'admin') { %>
        <a href="/admin/listing">
          <img src="/images/WhiteAdd.png" class="add-icon" />
        </a>
        <% } else if (isAuthenticated && role === 'user') { %>
        <a href="/user/listing">
          <img src="/images/WhiteAdd.png" class="add-icon" />
        </a>
        <% } %>
      </li>
  
      <li>
        <% if (isAuthenticated && role === 'admin') { %>
        <a href="/admin/admin-dashboard">
          <img src="/images/Icon1.png" alt="Profile" class="profile-icon" />
        </a>
        <% } else if (isAuthenticated && role === 'user') { %>
        <a href="/user/profile">
          <img src="/images/Icon1.png" alt="Profile" class="profile-icon" />
        </a>
        <% } else { %>
        <a href="/login">
          <img src="/images/Icon1.png" alt="Profile" class="profile-icon" />
        </a>
        <% } %>
      </li>
    </ul>
  </nav>
  
  
  
  
  <!-- Categories -->
  <div class="categories-cont">
    <button class="category active" onclick="openCategory('events-and-parties')">
      Events & Parties
    </button>
  
    <button class="category" onclick="openCategory('tech-and-gadgets')">
      Tech & Gadgets
    </button>
  
    <button class="category" onclick="openCategory('clothing-and-accessories')">
      Clothing & Accessories
    </button>
  
    <button class="category" onclick="openCategory('sports-and-outdoor-gear')">
      Sports & Outdoor Gear
    </button>
  
    <button class="category" onclick="openCategory('tools-and-equipment')">
      Tools & Equipment
    </button>
  
    <button class="category" onclick="openCategory('musical-instruments')">
      Musical Instruments
    </button>
  
    <button class="category" onclick="openCategory('home-and-office')">
      Home & Office
    </button>
  
    <button class="category" onclick="openCategory('pets-accessories')">
      Pets Accessories
    </button>
    <button class="category" onclick="openCategory('books-and-literature')">
        Books and Literature
    </button>
  </div>
  
  <div class="sort-dropdown">
    <button class="sort-toggle" onclick="toggleSortOptions()">
        <img src="/images/filter.png" alt="Filter Icon" class="sort-icon">
        Sort by 
        <span class="chevron">&#9662;</span>
    </button>    
      <ul class="sort-options" id="sortOptions">
          <li onclick="handleSort('default')">All Items</li>
          <li onclick="handleSort('newest-first')">Newest First</li>
          <li onclick="handleSort('alphabetical')">A-Z</li>
          <li onclick="handleSort('price-low-high')">Price (low to high)</li>
          <li onclick="handleSort('price-high-low')">Price (high to low)</li>
      </ul>
  </div>
  
  <!-- Tabs -->
  <div id="shopping-container"></div>
<!--Scripts-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log('Loaded here...')

        // Automatically open the category based on the URL query parameter
        const params = new URLSearchParams(window.location.search);
        const category = params.get("category");

        if (category) {
            setTimeout(() => {
            openCategory(category);
        }, 0);
        } else {
            // Default to the first category if no category is specified
            fetchItems();
        }
    })

    // First
    function openCategory(categoryName) {
        // Update the URL in the address bar without reloading the page
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set('category', categoryName);
        window.history.replaceState({}, '', currentUrl);

        // Add active class to the clicked button
        const categoryButtons = document.querySelectorAll('.category');
        categoryButtons.forEach(button => {
            const onclickAttr = button.getAttribute('onclick');
            const match = onclickAttr && onclickAttr.match(/openCategory\('(.+)'\)/);

            if (match) {
                const buttonCategory = match[1];
                if (buttonCategory === categoryName) {
                    button.classList.add('active');
                } else {
                    button.classList.remove('active');
                }
            }
        });

        // Fetch items for the selected category
        fetchItems(getCategoryId(categoryName));
    }

    //Hamburger Menu

    const hamburger = document.getElementById("hamburger");
    const navLinks = document.getElementById("nav-links");

    hamburger.addEventListener("click", () => {
        navLinks.classList.toggle("active");
        hamburger.classList.toggle("open"); 
    });

    const searchInput = document.getElementById("search");
    const searchButton = document.getElementById("search-button");
    const shoppingContainer = document.getElementById("shopping-container");
    const categoriesContainer = document.querySelector(".categories-cont");

    // Fetch items based on category ID
    async function fetchAllItems() {
        try {
            const response = await fetch('/api/shared/items');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            shoppingContainer.innerHTML = "";

            if (data.success && data.data.length > 0) {
                displayItems(data.data);
            } else {
                shoppingContainer.innerHTML = `<p>No items found.</p>`;
            }
        } catch (error) {
            console.error("Error fetching data:", error);
            shoppingContainer.innerHTML = "<p>Error loading items. Please try again later.</p>";
        }
    }

    // Fetch items based on category ID
    async function fetchItems(categoryId) {
        try {
            const response = await fetch(`/api/shared/items/category/${categoryId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            shoppingContainer.innerHTML = "";

            if (data.success && data.data.length > 0) {
                displayItems(data.data);

                // if (searchQuery) {
                //     const resultCount = data.data.length;
                //     const searchMessage = document.createElement("div");
                //     searchMessage.className = "search-results-message";
                //     searchMessage.innerHTML = `<p>Showing ${resultCount} result${resultCount !== 1 ? 's' : ''} for "${searchQuery}"</p>`;
                //
                //     // Clear Search Button
                //     const clearButton = document.createElement("button");
                //     clearButton.className = "clear-search";
                //     clearButton.innerText = "Clear Search";
                //     clearButton.addEventListener("click", function () {
                //         searchInput.value = "";
                //         fetchItems("");
                //     });
                //
                //     searchMessage.appendChild(clearButton);
                //     shoppingContainer.insertBefore(searchMessage, shoppingContainer.firstChild);
                // }
            } else {
                shoppingContainer.innerHTML = `<p>No items found.</p>`;
            }
        } catch (error) {
            console.error("Error fetching data:", error);
            shoppingContainer.innerHTML = "<p>Error loading items. Please try again later.</p>";
        }
    }

    // Fetch items when the page loads or fetch item by category
    document.addEventListener("DOMContentLoaded", function () {
        if (window.location.href === 'http://localhost:8000/shop') {
            fetchAllItems()
        } else {
            // Upon loading display the first category
            fetchItems(getCategoryId("events-and-parties"))
        }
    })

    // Search items based on user input
    async function searchItems(query) {
        try {
            const response = await fetch(`/api/shared/items/search?keyword=${encodeURIComponent(query)}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const { data: items, success } = await response.json();

            if (success && items.length > 0) {
                displayItems(items)
            } else {
                shoppingContainer.innerHTML = "<p>No items found matching your search.</p>";
            }
        } catch (error) {
            console.error("Error fetching data:", error);
            shoppingContainer.innerHTML = "<p>Error loading items. Please try again later.</p>";
        }
    }

    // function displayItems(items) {
    //     shoppingContainer.innerHTML = "";
    //
    //     if (!items.length) {
    //         shoppingContainer.innerHTML = "<p>No items found matching your search.</p>";
    //         return;
    //     }
    //
    //     let shoppingList = document.createElement("ul");
    //     shoppingList.className = "shoppingList";
    //
    //     items.forEach(item => {
    //         if (item.quantity <= 0) return;
    //
    //         let li = document.createElement("li");
    //         li.className = "shoppingItem";
    //         li.innerHTML = `
    //         <img src="/uploads/${item.image}" alt="Item Image" class="itemImage">
    //
    //         <div class="item-details">
    //        <p > <strong title="${item.name}" >${item.name}</strong></p>
    //         <strong>₱ ${item.price} per day</strong>
    //         <h5 title="${item.location}"> ${item.location}</h5>
    //         <p class="item-quantity"> ${item.quantity}items left</p>
    //         </div>`;
    //
    //         li.addEventListener("click", function () {
    //             localStorage.setItem("selectedItem", JSON.stringify(item));
    //             window.location.href = `/user/view-product/${item.id}`;
    //         });
    //
    //         shoppingList.appendChild(li);
    //     });
    //
    //     shoppingContainer.appendChild(shoppingList);
    // }

    searchButton.addEventListener("click", function () {
        searchItems(searchInput.value.trim());
    });

    // Clear the search field
    searchInput.addEventListener('search', function () {
        const categoryButtons = document.querySelectorAll('.category');

        if (searchInput.value === '') {
            // Clear the search input
            searchInput.value = '';

            // Show the categories container
            categoriesContainer.style.display = 'flex'

            // Clear the active class from all category buttons
            categoryButtons.forEach(button => {
                button.classList.remove('active');
            });

            // TODO: Fix this
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('category', 'events-and-parties');

            fetchItems(getCategoryId('events-and-parties'))
        }
    })

    searchInput.addEventListener('keypress', function (e) {
        if (e.key === "Enter") {
            // Hide the categories container
            categoriesContainer.style.display = 'none'

            searchItems(searchInput.value.trim())
        }
    });

    // Tabs Functionality 2nd
    // function openCategory(categoryName) {
    //     // This updates the URL in the address bar without reloading the page
    //     const currentUrl = new URL(window.location.href);
    //     currentUrl.searchParams.set('category', categoryName);
    //
    //     window.history.replaceState({}, '', currentUrl);
    //
    //     // Add active class to the clicked button when the category name in url matches
    //     const currentCategory = currentUrl.searchParams.get('category');
    //
    //     const categoryButtons = document.querySelectorAll('.category');
    //
    //     categoryButtons.forEach(button => {
    //         const onclickAttr = button.getAttribute('onclick');
    //         const match = onclickAttr.match(/openCategory\('(.+)'\)/);
    //
    //         if (match) {
    //             const buttonCategory = match[1];
    //
    //             if (buttonCategory === currentCategory) {
    //                 button.classList.add('active');
    //             } else {
    //                 button.classList.remove('active');
    //             }
    //         }
    //     });
    //
    //     // Get items for the selected category
    //     fetchItems(getCategoryId(categoryName));
    // }

    // Set the active category based on URL path
    document.addEventListener("DOMContentLoaded", function () {
        const path = window.location.pathname;
        const category = path.split("/").pop();

        if (category) {
            // Hide all shoppingContainers
            document.querySelectorAll(".shoppingContainer").forEach((container) => {
                container.style.display = "none";
            });

            // Show the selected category container
            const selectedContainer = document.getElementById(category);
            if (selectedContainer) {
                selectedContainer.style.display = "block";
            } else {
                console.error(`No element found with ID: ${category}`);
            }

            // Remove active class from all buttons
            document.querySelectorAll(".category").forEach((button) => {
                button.classList.remove("active");
            });

            // Add active class to the button corresponding to the category
            const activeButton = document.querySelector(`.category[onclick="openCategory('${category}')"]`);
            if (activeButton) {
                activeButton.classList.add("active");
            } else {
                console.error(`No button found for category: ${category}`);
            }
        } else {
            // Default to the first category if no category is specified
            const defaultCategory = document.querySelector(".category").getAttribute("onclick").match(/'([^']+)'/)[1];
            openCategory(defaultCategory);
        }
    })


    //home to shopping
    document.addEventListener("DOMContentLoaded", function () {
        // Get the URL parameters
        const params = new URLSearchParams(window.location.search);
        const category = params.get("category");

        if (category) {
            // Hide all shoppingContainers
            document
                .querySelectorAll(".shoppingContainer")
                .forEach((container) => {
                    container.style.display = "none";
                });

            // Show the selected category container
            const selectedContainer = document.getElementById(category);
            if (selectedContainer) {
                selectedContainer.style.display = "block";
            }
        }
    })

    function getCategoryId(categoryValue) {
        let category = categoryValue
        let categoryId = 1;

        switch (category) {
            case "events-and-parties":
                categoryId = 1;
                break;
            case "tech-and-gadgets":
                categoryId = 2;
                break;
            case "clothing-and-accessories":
                categoryId = 3;
                break;
            case "sports-and-outdoor-gear":
                categoryId = 4;
                break;
            case "tools-and-equipment":
                categoryId = 5;
                break;
            case "musical-instruments":
                categoryId = 6;
                break;
            case "home-and-office":
                categoryId = 7;
                break;
            case "pets-accessories":
                categoryId = 8;
                break;
            case "books-and-literature":
                categoryId = 9;
                break;
        }
        return categoryId;
    }

// Modify the displayItems function to store items globally
let globalItems = [];

function displayItems(items) {
    globalItems = [...items];
    
    shoppingContainer.innerHTML = "";

    if (!items.length) {
        shoppingContainer.innerHTML = "<p>No items found matching your search.</p>";
        return;
    }

    renderSortedItems(globalItems);
}


function renderSortedItems(items) {
    let shoppingList = document.createElement("ul");
    shoppingList.className = "shoppingList";

    items.forEach(item => {
        if (item.quantity <= 0) return;

        let li = document.createElement("li");
        li.className = "shoppingItem";
        li.innerHTML = `
        <img src="/uploads/${item.image}" alt="Item Image" class="itemImage">
       <div class="item-details"> 
            <strong>${item.name}</strong>
            <strong>₱ ${item.price} per day</strong>
            <h5> ${item.location}</h5>
            <p class="item-quantity"> ${item.quantity} items left</p>
            </div>`;
        li.addEventListener("click", function () {
            localStorage.setItem("selectedItem", JSON.stringify(item));
            window.location.href = `/user/view-product/${item.id}`;
        });

        shoppingList.appendChild(li);
    });

    shoppingContainer.appendChild(shoppingList);
}

function toggleSortOptions() {
    const options = document.getElementById("sortOptions");
    const isOpen = options.style.display === "block";
    options.style.display = isOpen ? "none" : "block";

    const chevron = document.querySelector(".chevron");
    chevron.style.transform = isOpen ? "rotate(0deg)" : "rotate(180deg)";
}

document.addEventListener("click", function (e) {
    const dropdown = document.querySelector(".sort-dropdown");
    const options = document.getElementById("sortOptions");
    if (!dropdown.contains(e.target)) {
        options.style.display = "none";
        document.querySelector(".chevron").style.transform = "rotate(0deg)";
    }
});

function handleSort(option) {
    let sorted = [...globalItems];
    const button = document.querySelector(".sort-toggle");
    const chevron = document.querySelector(".chevron");
    const sortOptions = document.getElementById("sortOptions");

    switch (option) {
        case 'default':
            fetch('/api/shared/items')
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        displayItems(data.data);

                        button.innerHTML = `All Items <span class="chevron">&#9662;</span>`;

                        sortOptions.style.display = "none";
                        chevron.style.transform = "rotate(0deg)";

                        const categoryButtons = document.querySelectorAll(".active");
                        categoryButtons.forEach(btn => btn.classList.remove("active"));
                    } else {
                        shoppingContainer.innerHTML = "<p>Failed to load items.</p>";
                    }
                })
                .catch(error => {
                    console.error('Error fetching all items:', error);
                    shoppingContainer.innerHTML = "<p>Error fetching items.</p>";
                });
            return;
        case 'alphabetical':
            sorted.sort((a, b) => a.name.localeCompare(b.name));
            break;
        case 'price-low-high':
            sorted.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));
            break;
        case 'price-high-low':
            sorted.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));
            break;
        case 'newest-first':
            sorted.sort((a, b) => {
                if (a.created_at && b.created_at) {
                    return new Date(b.created_at) - new Date(a.created_at);
                }
                return b.id - a.id;
            });
            break;
        default:
            return;
    }

    let label = "Sort by";
    switch (option) {
        case 'default':
            label = "All Items";
            break;
        case 'alphabetical':
            label = "A-Z";
            break;
        case 'price-low-high':
            label = "Price (low to high)";
            break;
        case 'price-high-low':
            label = "Price (high to low)";
            break;
        case 'newest-first':
            label = "Newest First";
            break;
    }
    button.innerHTML = `${label} <span class="chevron">&#9662;</span>`;

    document.getElementById("sortOptions").style.display = "none";
    document.querySelector(".chevron").style.transform = "rotate(0deg)";

    shoppingContainer.innerHTML = "";
    renderSortedItems(sorted);
}
</script>
<script src="/js/get-category-id.js"></script>