<link rel="stylesheet" href="/css/view-product.css"/>
<link rel="web icon" type="png" href="/images/webicon.png"/>

<!--Navigation Bar-->
<nav>
    <a href="/">
        <div class="logo">
            <h1>Rental <span> Hub</span></h1>
        </div>
    </a>
    <ul>
        <li><a href="/shop">Shop</a></li>
        <li>
            <a href="/user/listing"
            ><img src="/images/WhiteAdd.png" class="add-icon"
                /></a>
        </li>
        <li>
            <% if (isAuthenticated && role === 'admin' ) { %>
                <a href="/admin/admin-dashboard">
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } else if (isAuthenticated && role === 'user' ) { %>
                <a href="/user/profile">
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } else { %>
                <a href="/login">
                    <img src="/images/Icon1.png" alt="Profile" class="profile-icon"/>
                </a>
            <% } %>
        </li>
    </ul>
</nav>
<br/><br/><br/><br/>

<% if (is_owner) { %>
    <div style="display: flex; justify-content: center;">
        <button class="request-btn" onclick="window.location.href='/user/update-listing/<%= item_id %>'">
            Update
        </button>
    </div>
<% } %>
<!-- Main container for product view -->
<div class="view-product-container">
    <!-- Left Section: Product Image + Details (Stacked) -->
    <div class="left-section">
        <!-- Product Image -->
        <div class="product">
            <img id="product-image" src="" alt="Product Image"/>
            <div class="product-details">
                <h2 id="product-name"></h2>
                <h1 id="product-price"></h1>
                <h4 id="product-quantity"></h4>
                <div class="product-description">
                    <h3>Product Description</h3>
                <p id="product-description"></p>
                </div>
            </div>
        </div>

        <!-- Owner Info -->
        <div class="owner-info" onclick="openForm()">
            <h2>Posted by</h2>
            <br>
            <hr/>
            <div class="owner-details">
                <div class="pfp">
                    <img id="owner-image" src="" alt="Owner Image"/>
                </div>
                <div class="o-details">
                    <strong id="owner-name">Loading...</strong><br/>
                    <span id="owner-location">Loading...</span> <br/>
                    <span id="owner-rating">⭐ Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Owner Information -->
    <div id="modalOverlay" class="modal-overlay"></div>
    <div id="myForm">
        <button class="close-btn" onclick="closeForm()">X</button>

        <!--Profile Details-->
        <div class="side-profile">
            <div class="profile">
                <img id="profile-image" src="" alt=""/>
            </div>
            <hr/>
            <h3 id="owners-fullname">*Owner's Name*</h3>
            <p id="contact-number">*Contact Info*</p>
            <p id="social-media">
                <a id="social-media-link" href="#" target="_blank"
                >*Social Media Link*</a
                >
            </p>
            <p id="location">*Location*</p>
            <p id="owner-rating">*Rating*</p>
        </div>

        <!-- Right Side-->
        <div class="side-info">
            <div class="tabs">
                <button class="tab-btn active" onclick="switchTab(event, 'items')">
                    Items
                </button>
                <button class="tab-btn" onclick="switchTab(event, 'reviews')">
                    Reviews
                </button>
            </div>
            <div class="pop-content">
                <div
                        id="items"
                        class="tab-content active"
                >
                    <div id="approvedItemsList" class="shoppingList"></div>
                </div>
                <div id="reviews" class="tab-content">
                    <br>
                    <h3>Reviewed As:</h3>
                    <div class="toggle-wrapper">
                        <div class="toggle-container">
                            <button id="renterBtn" class="toggle-btn">Renter</button>
                            <button id="ownerBtn" class="toggle-btn">Owner</button>
                            <div class="toggle-slider"></div>
                        </div>
                    </div>
                    <br>
                    <hr>
                    <div id="renterContent" class="content-box">


                    </div>
                    <div id="ownerContent" class="content-box" style="display: none">

                    </div>

                </div>
            </div>
        </div>
    </div>

     <!-- Right Section: Rental Options -->
    <% if (!is_owner) { %>
        <div class="right-section">
            <div class="rental-options">
                <form id="rent-form">
                    <h3 class="pickdate" id="pickdate">Pick Date</h3>
                    <div class="calendar">
                        <div class="month">
                            <a href="#" id="prev-month" class="nav">&lt;</a>
                            <div id="month-year">February 2025</div>
                            <a href="#" id="next-month" class="nav">&gt;</a>
                        </div>
                        <div class="days">
                            <span>Sun</span>
                            <span>Mon</span>
                            <span>Tue</span>
                            <span>Wed</span>
                            <span>Thu</span>
                            <span>Fri</span>
                            <span>Sat</span>
                        </div>
                        <div id="dates-grid" class="dates">
                            <!-- Dates will be rendered here -->
                        </div>
                    </div>
                    <div class="quantity-container">
                        <strong>Quantity</strong>
                        <button type="button" onclick="changeQuantity(-1)">-</button>
                        <input type="number" id="quantity" name="rental_quantity" value="1" min="1">
                        <button type="button" onclick="changeQuantity(1)">+</button>
                    </div>
                    <div class="delivery-options">
                        <button type="button" id="meetup-btn">Meet Up</button>
                        <button type="button" id="delivery-btn">Delivery</button>
                    </div>
                    <% if (isAuthenticated && role === 'admin' || role === 'user' ) { %>
                        <button type="submit" id="request-btn" class="request-btn">Request</button>
                    <% } else { %>
                    <button class="request-btn">
                        <a href="/login?redirect=/user/view-product/<%= item_id %>" style="color: black">
                            Request
                        </a>
                    </button>
                    <% } %>
                    <br>
                    <p class="inquire">For reservation <a href ="/user/inquire/<%= item_id %>" class="inquire-link"> Inquire Now!</a></p>
                </form>
        </div>
    </div>
    <% } %>
</div>

<script>
    let selectedItem = null;

    window.addEventListener("load", function () {
        document.getElementById("myForm").style.display = "none";
        document.getElementById("modalOverlay").style.display = "none";
    });

    // Open Form (Show overlay & form)
    async function openForm() {
        const item = JSON.parse(localStorage.getItem("selectedItem"));
        const response = await fetch(
            `http://localhost:8000/api/user/view-product/posted-by/${item.id}`
        );
        const data = await response.json();
        const {
            id,
            profile_image,
            owner_id,
            owner,
            contact_number,
            social_media,
            location,
            average_rating,
        } = data.data;

        document.querySelector("#profile-image").src = `/uploads/${profile_image}`;
        document.querySelector("#owners-fullname").textContent = owner;
        document.querySelector("#contact-number").textContent = contact_number;

        // Update the link and text
        const socialMediaLink = document.querySelector("#social-media-link");
        socialMediaLink.textContent = social_media;
        socialMediaLink.href = social_media; // Set the href attribute
        document.querySelector("#location").textContent = location;
        document.querySelector(
            "p#owner-rating"
        ).textContent = selectedItem.average_rating ? `⭐ ${selectedItem.average_rating}` : 'No Ratings'

        document.getElementById("myForm").style.display = "flex";
        document.getElementById("modalOverlay").style.display = "block"; // Show the overlay
    }

    // Close Form (Hide overlay & form)
    function closeForm() {
        document.getElementById("myForm").style.display = "none";
        document.getElementById("modalOverlay").style.display = "none"; // Hide the overlay
    }

    // Switch Tabs
    function switchTab(event, tabName) {
        // Remove active class from all buttons
        document
            .querySelectorAll(".tab-btn")
            .forEach((btn) => btn.classList.remove("active"));

        // Hide all content sections
        document
            .querySelectorAll(".tab-content")
            .forEach((content) => content.classList.remove("active"));

        // Add active class to the clicked button
        event.currentTarget.classList.add("active");

        // Show the selected tab content
        document.getElementById(tabName).classList.add("active");
    }

    // Function to load the selected product details
    async function loadSelectedProduct() {
        selectedItem = JSON.parse(localStorage.getItem("selectedItem"));
        console.log("selectedItem", selectedItem);
        if (selectedItem) {
            document.getElementById("product-image").src =
                `/uploads/${selectedItem.image}` || "default.jpg";
            document.getElementById("product-name").innerText = selectedItem.name;
            document.getElementById(
                "product-price"
            ).innerText = `₱${selectedItem.price} per day`;
            document.getElementById("product-description").innerText =
                selectedItem.description;

            document.getElementById("product-quantity").innerText =
            ` ${ selectedItem.quantity} Items left ` ;

            const rentalQuantity = document.querySelector("[name='rental_quantity']");
            if (rentalQuantity) {
                rentalQuantity.setAttribute("max", selectedItem.quantity);
            }

            // Owner Info
            document.getElementById("owner-name").textContent =
                selectedItem.name || "Unknown Owner";

            document.querySelector(
                "#owner-image"
            ).src = `/uploads/${selectedItem.profile_image}`;
            document.querySelector("#owner-name").textContent = selectedItem.owner;

            document.getElementById("owner-location").textContent =
                selectedItem.location || "Unknown Location";
            document.querySelector(
                "#owner-rating"
            ).textContent = selectedItem.average_rating ? `⭐ ${selectedItem.average_rating}` : 'No Ratings'
        } else {
            alert("No product selected!");
            window.location.href = ".shopping";
        }
    }

    // Call function when page loads
    loadSelectedProduct();

    // Function to convert rating number to stars
    function generateStars(rating) {
        if (rating === "No Ratings") return rating;
        let stars = "⭐".repeat(Math.floor(rating)); // Full stars
        return stars + ` (${rating})`; // Show the average rating value
    }

    //CALENDRRRRRRRRRRRRRRRRRRRRRRRRRRRR
    //calendar functionssssss
    document.addEventListener("DOMContentLoaded", function () {
        const datesGrid = document.getElementById("dates-grid");
        const monthYearDisplay = document.getElementById("month-year");
        const prevMonthBtn = document.getElementById("prev-month");
        const nextMonthBtn = document.getElementById("next-month");

        const instructionText = document.createElement("p");
        instructionText.id = "instruction-text";
        instructionText.textContent = "Select a start date for your rental.";
        datesGrid.parentElement.appendChild(instructionText);

        const resetBtn = document.createElement("button");
        resetBtn.id = "reset-selection";
        resetBtn.textContent = "Reset Selection";
        resetBtn.style.marginTop = "10px";
        resetBtn.style.display = "none";
        datesGrid.parentElement.appendChild(resetBtn);

        let currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        let displayedMonth = currentDate.getMonth();
        let displayedYear = currentDate.getFullYear();
        let startDate = null;
        let endDate = null;

        const unavailableDates = [];

        function renderCalendar() {
            datesGrid.innerHTML = "";
            instructionText.textContent = "Select a start date for your rental.";
            resetBtn.style.display = "none";

            const firstDay = new Date(displayedYear, displayedMonth, 1);
            const lastDay = new Date(displayedYear, displayedMonth + 1, 0);
            const startingDay = firstDay.getDay();
            const monthLength = lastDay.getDate();

            monthYearDisplay.textContent = `${firstDay.toLocaleString("default", {
                month: "long",
            })} ${displayedYear}`;

            for (let i = 0; i < startingDay; i++) {
                const emptyCell = document.createElement("div");
                emptyCell.className = "empty-cell";
                datesGrid.appendChild(emptyCell);
            }

            for (let day = 1; day <= monthLength; day++) {
                const dateCell = document.createElement("div");
                dateCell.className = "date-cell";
                dateCell.textContent = day;

                const cellDate = new Date(displayedYear, displayedMonth, day);
                cellDate.setHours(0, 0, 0, 0);

                //Use locale date format to prevent timezone shift issues
                dateCell.dataset.date = cellDate.toLocaleDateString("en-CA");

                if (cellDate < currentDate) {
                    dateCell.classList.add("disabled");
                } else if (unavailableDates.includes(dateCell.dataset.date)) {
                    dateCell.classList.add("unavailable");
                } else {
                    dateCell.addEventListener("click", () =>
                        handleDateSelection(dateCell.dataset.date, dateCell)
                    );
                }

                datesGrid.appendChild(dateCell);
            }

            highlightSelectedDates();
        }

        function handleDateSelection(dateStr, cell) {
            // Convert dataset string back to Date consistently
            const selectedDate = new Date(dateStr);
            selectedDate.setHours(0, 0, 0, 0);

            if (selectedDate < currentDate || unavailableDates.includes(dateStr)) {
                return;
            }

            if (!startDate || (startDate && endDate)) {
                // Always reset if full selection already exists
                startDate = selectedDate;
                endDate = null;
                localStorage.setItem("startDate", dateStr);
                localStorage.removeItem("endDate");
                instructionText.textContent = "Now select an end date for your rental.";
                resetBtn.style.display = "block";
            } else if (!endDate && selectedDate >= startDate) {
                endDate = selectedDate;
                localStorage.setItem("endDate", dateStr);
                instructionText.textContent = `Rental period: ${formatDate(startDate)} to ${formatDate(endDate)}.`;
            } else {
                resetSelection();
                return;
            }
            highlightSelectedDates();
        }

        function highlightSelectedDates() {
            document.querySelectorAll(".date-cell").forEach((cell) => {
                const cellDate = new Date(cell.dataset.date);
                cellDate.setHours(0, 0, 0, 0);

                cell.classList.remove("selected", "range");

                if (startDate && cellDate.getTime() === startDate.getTime()) {
                    cell.classList.add("selected");
                }
                if (endDate && cellDate.getTime() === endDate.getTime()) {
                    cell.classList.add("selected");
                }
                if (
                    startDate &&
                    endDate &&
                    cellDate > startDate &&
                    cellDate < endDate
                ) {
                    cell.classList.add("range");
                }
            });
        }

        function resetSelection() {
            startDate = null;
            endDate = null;
            localStorage.removeItem("startDate");
            localStorage.removeItem("endDate");
            instructionText.textContent = "Select a start date for your rental.";
            resetBtn.style.display = "none";
            highlightSelectedDates();
        }

        //Clears localStorage(start & end date) on page load
        document.addEventListener("DOMContentLoaded", function () {
            localStorage.removeItem("startDate");
            localStorage.removeItem("endDate");
            renderCalendar();
        });

        // Clear localStorage when the page is closed or refreshed
        window.addEventListener("beforeunload", function () {
            localStorage.removeItem("startDate");
            localStorage.removeItem("endDate");
        });

        prevMonthBtn.addEventListener("click", (e) => {
            e.preventDefault();
            if (
                displayedYear > currentDate.getFullYear() ||
                (displayedYear === currentDate.getFullYear() &&
                    displayedMonth > currentDate.getMonth())
            ) {
                displayedMonth--;
                if (displayedMonth < 0) {
                    displayedMonth = 11;
                    displayedYear--;
                }
                renderCalendar();
            }
        });

        nextMonthBtn.addEventListener("click", (e) => {
            e.preventDefault();
            displayedMonth++;
            if (displayedMonth > 11) {
                displayedMonth = 0;
                displayedYear++;
            }
            renderCalendar();
        });

        resetBtn.addEventListener("click", resetSelection);

        function formatDate(date) {
            return date.toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
            });
        }

        renderCalendar();
    });

    //PRESSED FUNCTION SA Mode of Payment
    document.addEventListener("DOMContentLoaded", function () {
        const meetupBtn = document.getElementById("meetup-btn");
        const deliveryBtn = document.getElementById("delivery-btn");

        function addPressEffect(button) {
            button.classList.add("pressed");

            // Keep the effect for 200ms before removing it
            setTimeout(() => {
                button.classList.remove("pressed");
            }, 200);
        }

        meetupBtn.addEventListener("click", function () {
            addPressEffect(meetupBtn);
        });

        deliveryBtn.addEventListener("click", function () {
            addPressEffect(deliveryBtn);
        });
    });

    //FUNCTION FOR REQUEST BUTTON!!!!
    document.addEventListener("DOMContentLoaded", function () {
        const requestBtn = document.getElementById("request-btn");
        const meetupBtn = document.getElementById("meetup-btn");
        const deliveryBtn = document.getElementById("delivery-btn");

        let selectedDeliveryMethod = null;

        // Get access to the calendar's date variables
        const calendar = document.querySelector(".calendar");

        // Handle delivery method selection
        meetupBtn.addEventListener("click", function () {
            selectedDeliveryMethod = "Meetup";
            meetupBtn.classList.add("selected");
            deliveryBtn.classList.remove("selected");
        });

        deliveryBtn.addEventListener("click", function () {
            selectedDeliveryMethod = "Delivery";
            deliveryBtn.classList.add("selected");
            meetupBtn.classList.remove("selected");
        });

        // ✅ Handle Request Button Click
        requestBtn.addEventListener("click", function (event) {
            event.preventDefault();

            // Get the selected dates from the calendar
            let startDateStr = localStorage.getItem("startDate");
            let endDateStr = localStorage.getItem("endDate");

            if (!startDateStr || !endDateStr) {
                showErrorMessage(
                    "Please select both start and end dates for your rental period."
                );
                return;
            }

            startDate = new Date(startDateStr);
            endDate = new Date(endDateStr);

            // Check if delivery method is selected
            if (!selectedDeliveryMethod) {
                showErrorMessage(
                    "Please select a mode of delivery (Meet Up or Delivery)."
                );
                return;
            }

            showConfirmationModal(startDate, endDate, selectedDeliveryMethod);
        });

        // Function to show confirmation modal
        function showConfirmationModal(startDate, endDate, deliveryMethod) {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.innerHTML = `
              <p><strong>Confirm rental request for: </strong><br>
              <strong>From:</strong> ${formatDate(startDate)}<br>
              <strong>To:</strong> ${formatDate(endDate)}<br>
              <strong>Delivery Method:</strong> ${deliveryMethod}</p><br>
              <strong>Note: Please contact the owner for the transaction settlement.</strong>
              <h3>Terms and Condition</h3>
                  <p>
                  <strong>1. General Terms:</strong><br>
                  By requesting an item on Rental Hub, both renters and owners agree to these terms and conditions to ensure secure, fair, and seamless transactions. Rental Hub reserves the right to update these terms at any time.
              </p>

              <p>
                  <strong>2. Responsibilities of Owners:</strong><br>
                  - Owners must provide accurate descriptions and images of the item.<br>
                  - Items must be in proper working condition before handing them over.<br>
                  - Any existing defects or issues must be disclosed before the transaction.<br>
                  - Owners may require security deposits and must return them upon receiving the item in its original condition.<br>
                  - Owners have the right to decline rental requests from users with a history of late returns or damages.<br>
              </p>

              <p>
                  <strong>3. Responsibilities of Renters:</strong><br>
                  - Renters must inspect the item upon receipt and report any damages immediately.<br>
                  - The item must be used responsibly and returned on time in its original condition.<br>
                  - Any delays, damages, or losses may result in additional charges or deductions from the security deposit.<br>
                  - If an extension is needed, the renter must request approval from the owner before the due date.<br>
              </p>

              <p>
                  <strong>4. Minimum Rental Period:</strong><br>
                  - The minimum rental period for any item is **two (2) days**.<br>
                  - Rental extensions must be requested in advance and approved by the owner.<br>
              </p>

              <p>
                  <strong>5. Penalties for Damages or Loss:</strong><br>
                  - <strong>Major Damage / Irreversible Damage:</strong> Renters will be charged **three (3) times** the listed price of the item.<br>
                  - <strong>Classification:</strong> Includes severe physical damage affecting functionality, structure, or usability (e.g., broken parts, water/fire damage, permanent stains, or unauthorized modifications).<br><br>
                  - <strong>Minor Damage:</strong> Renters will be charged **50% of the listed price** for inconvenience.<br>
                  - <strong>Classification:</strong> Includes cosmetic issues that do not affect functionality but impact appearance (e.g., scratches, small dents, removable stains, or minor loose parts).<br>
                  - <strong>Lost or Unreturned Items:</strong> Renters will be charged the full replacement value of the item.<br>
              </p>

              <p>
                  <strong>6. Payment and Fees:</strong><br>
                  - Payments must be made through Rental Hub’s designated payment methods.<br>
                  - Service fees may apply to cover platform maintenance and transaction security.<br>
                  - Rental Hub is not responsible for payment disputes between users but may offer mediation if needed.<br>
              </p>

              <p>
                  <strong>7. Cancellations and Refunds:</strong><br>
                  - Cancellation policies depend on the owner’s terms.<br>
                  - Cancellations made after the rental period has begun are not eligible for refunds.<br>
                  - If an owner cancels a confirmed request, the renter will receive a full refund.<br>
              </p>

              <p>
                  <strong>8. Dispute Resolution:</strong><br>
                  - Disputes related to item condition, security deposits, or late fees should first be settled between both parties.<br>
                  - If unresolved, Rental Hub’s support team will review relevant evidence, including rental agreements, item photos, and communication logs.<br>
                  - Rental Hub’s final decision on disputes will be binding.<br>
              </p>

              <p>
                  <strong>9. Liability Disclaimer:</strong><br>
                  - Rental Hub facilitates transactions but does not guarantee the condition, functionality, or safety of rented items.<br>
                  - Users are responsible for ensuring fair transactions and inspecting items before accepting them.<br>
                  - Rental Hub is not liable for damages, losses, or conflicts arising outside the platform.<br>
              </p>

              <p>
                  <strong>10. Acceptance of Terms:</strong><br>
                  By requesting an item on Rental Hub, users confirm that they have read, understood, and agreed to these terms. Non-compliance may result in penalties, account restrictions, or removal from the platform.
              </p>
              <div class="modal-buttons">
                  <button id="confirm-btn">Yes</button>
                  <button id="cancel-btn">No</button>
              </div>
          `;

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            // Add styles for modal
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            modal.style.backgroundColor = "white";
            modal.style.padding = "20px";
            modal.style.borderRadius = "10px";
            modal.style.minWidth = "300px";
            modal.style.Width = "80%";
            modal.style.maxWidth = "450px";
            modal.style.maxHeight = "80vh";
            modal.style.overflowY = "auto";
            modal.style.top = "50%";
            modal.style.left = "50%";
            modal.style.lineHeight = "1.6";
            modal.style.textAlign = "justify";
            modal.querySelector(".modal-buttons").style.display = "flex";
            modal.querySelector(".modal-buttons").style.justifyContent = "center";
            h3 = modal.querySelector("h3");
            h3.style.textAlign = "center";
            h3.style.fontSize = "1.17em";
            h3.style.fontWeight = "bold";

            document
                .getElementById("confirm-btn")
                .addEventListener("click", async function () {
                    console.log("Rental confirmed!");
                    document.body.removeChild(modalOverlay);

                    // Process the data here
                    const rentForm = document.querySelector("#rent-form");
                    const formData = new FormData(rentForm);
                    let formObject = {}; // Initialize an empty object to store form data

                    // Loop through the form data and build the object
                    for (let [key, value] of formData.entries()) {
                        // Check if the key corresponds to a select element
                        const selectElement = rentForm.querySelector(`[name="${key}"]`);
                        if (selectElement && selectElement.tagName === "SELECT") {
                            // Get the selected option's text content
                            const selectedOption =
                                selectElement.options[selectElement.selectedIndex];
                            formObject[key] = selectedOption.textContent; // Use the text content for select elements
                        } else {
                            // For other form elements, use the value
                            formObject[key] = value;
                        }
                    }

                    // Add data from current localStorage item
                    const selectedItem = localStorage.getItem("selectedItem");

                    startDate = new Date(startDate);
                    const formattedStartDate = startDate.toISOString().split("T")[0];
                    endDate = new Date(endDate);
                    const formattedEndDate = endDate.toISOString().split("T")[0];

                    formObject = {
                        ...formObject,
                        start_date: formattedStartDate,
                        end_date: formattedEndDate,
                        mode_of_delivery: selectedDeliveryMethod,
                        ...JSON.parse(selectedItem),
                        renter_id: "<%= renter_id %>",
                    };

                    try {
                        const response = await fetch(`/api/user/my-requests`, {
                            method: "POST",
                            headers: {"Content-Type": "application/json"},
                            body: JSON.stringify(formObject),
                        });
                        if (response.ok) {
                            alert("Requesting to rent item in-progress...");
                            setTimeout(() => {
                                window.location.href = "/shop";
                            }, 2000);
                        }
                    } catch (error) {
                        console.error("Error canceling rent:", error);
                    }

                    console.log("formObject:", formObject);

                    showSuccessMessage();
                });

            document
                .getElementById("cancel-btn")
                .addEventListener("click", function () {
                    console.log("Rental canceled.");
                    document.body.removeChild(modalOverlay);
                });
        }

        // Function to show success message modal
        function showSuccessMessage() {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.style.backgroundColor = "#f5f5f5";
            modal.style.padding = "20px";
            modal.style.borderRadius = "30px";
            modal.style.border = "3px solid #009959";
            modal.style.fontWeight = "bold";
            modal.style.fontSize = "30px";
            modal.style.fontFamily = "Poppins, sans-serif";
            modal.innerHTML = `<p>Rental request submitted successfully!</p>`;
            modal.style.width = "40%";

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            setTimeout(() => {
                document.body.removeChild(modalOverlay);
            }, 2000);
        }

        // Function to show error message modal
        function showErrorMessage(message) {
            const modalOverlay = document.createElement("div");
            modalOverlay.className = "modal-overlay";
            modalOverlay.style.position = "fixed";
            modalOverlay.style.top = "0";
            modalOverlay.style.left = "0";
            modalOverlay.style.width = "100%";
            modalOverlay.style.height = "100%";
            modalOverlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
            modalOverlay.style.display = "flex";
            modalOverlay.style.justifyContent = "center";
            modalOverlay.style.alignItems = "center";
            modalOverlay.style.zIndex = "1000";

            const modal = document.createElement("div");
            modal.className = "modal";
            modal.style.backgroundColor = "#ffe6e6";
            modal.style.padding = "20px";
            modal.style.borderRadius = "8px";
            modal.innerHTML = `<p>${message}</p>`;

            modalOverlay.appendChild(modal);
            document.body.appendChild(modalOverlay);

            setTimeout(() => {
                document.body.removeChild(modalOverlay);
            }, 2000);
        }

        // Helper function to format date
        function formatDate(date) {
            return date.toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
            });
        }
    });

    //qty counter
    function changeQuantity(amount) {
        let qtyInput = document.getElementById("quantity");
        let currentQty = parseInt(qtyInput.value);
        let maxQty = parseInt(qtyInput.getAttribute("max")) || Infinity; // Get max value or set it to Infinity if not defined

        let newQty = currentQty + amount;

        if (newQty < 1) {
            newQty = 1;
        } else if (newQty > maxQty) {
            newQty = maxQty;
        }

        qtyInput.value = newQty;
    }

    // Toggle between renter and owner
    document.addEventListener("DOMContentLoaded", function () {
        const renterBtn = document.getElementById("renterBtn");
        const ownerBtn = document.getElementById("ownerBtn");
        const slider = document.querySelector(".toggle-slider");
        const renterContent = document.getElementById("renterContent");
        const ownerContent = document.getElementById("ownerContent");

        // Default state: Show "For Renters" and position the slider
        slider.style.transform = "translateX(0%)";
        renterBtn.style.color = "#12263f";
        ownerBtn.style.color = "white";
        renterContent.style.display = "block"; // Show renters section
        ownerContent.style.display = "none"; // Hide owners section

        renterBtn.addEventListener("click", function () {
            slider.style.transform = "translateX(0%)";
            renterBtn.style.color = "#12263f";
            ownerBtn.style.color = "white";
            renterContent.style.display = "block"; // Show renters section
            ownerContent.style.display = "none"; // Hide owners section
        });

        ownerBtn.addEventListener("click", function () {
            slider.style.transform = "translateX(100%)";
            ownerBtn.style.color = "#12263f";
            renterBtn.style.color = "white";
            renterContent.style.display = "none"; // Hide renters section
            ownerContent.style.display = "block"; // Show owners section
        });
    });

    // Fetch and display reviews
    document.addEventListener("DOMContentLoaded", () => {
        const userId = JSON.parse(localStorage.getItem("selectedItem"))?.owner_id;
        const renterBtn = document.getElementById("renterBtn");
        const ownerBtn = document.getElementById("ownerBtn");
        const renterContent = document.getElementById("renterContent");
        const ownerContent = document.getElementById("ownerContent");

        renterBtn.addEventListener("click", () => {
            renterContent.style.display = "block";
            ownerContent.style.display = "none";
            console.log("Renter ID used:", userId);
            fetchReviews(userId, "renter", renterContent);
        });

        ownerBtn.addEventListener("click", () => {
            ownerContent.style.display = "block";
            renterContent.style.display = "none";
            console.log("Owner ID used:", userId);
            fetchReviews(userId, "owner", ownerContent);
        });

        async function fetchReviews(userId, role, container) {
            try {
                const apiUrl = `http://localhost:8000/api/user/profile/reviews/${userId}?role=${role}`;
                console.log("Fetching data from:", apiUrl);

                const response = await fetch(apiUrl);
                const {data, success} = await response.json();

                if (!response.ok) {
                    console.error(`HTTP error! status: ${response.status}`);
                    container.innerHTML = `<p>Error: Failed to fetch reviews (HTTP ${response.status})</p>`;
                    return;
                }

                if (success) {
                    console.log("Fetched reviews:", data);
                    renderReviews(data, container);
                } else {
                    console.error("Failed to load reviews:", data?.message || "Unknown error");
                    container.innerHTML = "<p>Error loading reviews</p>";
                }
            } catch (error) {
                console.error("Error fetching reviews:", error.message);
                container.innerHTML = "<p>Connection error while loading reviews</p>";
            }
        }

        function renderReviews(reviews, container) {
            container.innerHTML = "";

            if (!reviews || reviews.length === 0) {
                container.innerHTML = "<p>No reviews found.</p>";
                return;
            }

            reviews.forEach((review) => {
                const formattedDate = new Date(review.date_posted).toLocaleDateString('en-US');
                const reviewHTML = `
                    <div class="reviewItem">
                      <br>
                      <div class="review-header">
                        <img class="itemImage" src="/uploads/${review.profile_image}" alt="${review.renter}" />
                        <div class="header-info">
                        <h3>${review.renter}</h3>
                        <p>${review.location}</p>
                        <p>${formattedDate}<p>
                          </div>
                      </div>
                      <div class="review-content">
                        <div class="item-rate">
                          <span> ${generateStars(review.stars)}</span>
                          <strong><p>${review.item_name}</p></strong>
                          </div>
                        <p><strong>Review:</strong> ${review.review_text}</p>
                      </div>
                      <br>
                      <hr>
                    </div>
                `;
                container.innerHTML += reviewHTML;
            });
        }

        // Get Stars
        function generateStars(rating) {
            let stars = "";
            for (let i = 1; i <= rating; i++) {
                stars += "⭐"
            }
            return stars;
        }

        renterBtn.click(); //para sa autoshow ng reviews
    });


    async function getSelectedItem(item_id) {
        const response = await fetch(
            `http://localhost:8000/api/shared/items/search-by/${item_id}`
        );
        const {data} = await response.json();
        localStorage.setItem('selectedItem', JSON.stringify(data));

        // Then change the url to the view-product page
        window.location.href = `/user/view-product/${item_id}`;
    }


    //Function to get items
    document.addEventListener("DOMContentLoaded", () => {
        const approvedItemsList = document.getElementById("approvedItemsList");
        const selectedItem = JSON.parse(localStorage.getItem("selectedItem"));
        const userId = selectedItem?.owner_id;


        async function fetchApprovedItems() {
            try {
                const apiUrl = `http://localhost:8000/api/user/my-items/approved/${userId}`;
                const response = await fetch(apiUrl);

                if (!response.ok) {
                    console.error(`HTTP error! status: ${response.status}`);
                    approvedItemsList.innerHTML = `<p>Error: Failed to fetch approved items (HTTP ${response.status})</p>`;
                    return;
                }

                const {data, success} = await response.json();

                if (success) {
                    console.log("Approved items data:", data);
                    renderApprovedItems(data);
                } else {
                    console.error(
                        "Failed to load approved items:",
                        data ? data.message || "Unknown error" : "Empty response"
                    );
                    approvedItemsList.innerHTML = "<p>Error loading approved items</p>";
                }
            } catch (error) {
                console.error("Error fetching approved items:", error);
                approvedItemsList.innerHTML =
                    "<p>Connection error while loading items</p>";
            }
        }


        function renderApprovedItems(items) {
            approvedItemsList.innerHTML = "";

            if (!items || items.length === 0) {
                approvedItemsList.innerHTML = "<p>No approved items found.</p>";
                return;
            }

            items.forEach((item) => {
                if (item.item_quantity <= 0) return; // Skip items with zero quantity
                const itemHTML = `
                  <a href="#" onclick="getSelectedItem(${item.item_id})">
                    <div class="shoppingItem">
                      <div>
                        <img class="itemImage" src="/uploads/${item.item_image}" alt = "${item.item_name}" />
                      </div>
                      <div class="itemDetails">
                        <strong title="${item.item_name}">${item.item_name}</strong>
                        <strong>₱ :  ${item.item_price} per day</strong>
                        <h5>${item.item_location}</h5>
                        <p> ${item.item_quantity} Items Left</p>
                      </div>
                    </div>
                  </a>
                `;
                approvedItemsList.innerHTML += itemHTML;
            });
        }

        fetchApprovedItems();
    });
</script>
