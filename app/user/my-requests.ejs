<link rel="stylesheet" href="/css/archives.css"/>
<link rel="web icon" type="png" href="/images/webicon.png">
<!--Navigation Bar-->
<%- include('../partials/user/header-navbar.ejs'); %>

<div class="main">
    <!--Sidebar-->
    <%- include('../partials/user/sidebar.ejs'); %>

    <!--Main Content-->
    <%
    function formatDateRange(startDate, endDate) {
        const options = {year: 'numeric', month: 'long', day: 'numeric'};

        const start = new Date(startDate).toLocaleDateString('en-US', options);
        const end = new Date(endDate).toLocaleDateString('en-US', options);

        return `${start} - ${end}`;
    }
    %>

    <div class="content">
        <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'Requests')">
                Requests
            </button>
            <button class="tablinks" onclick="openTab(event, 'On Going')">
                On Going
            </button>
            <button class="tablinks" onclick="openTab(event, 'Review')">
                Review
            </button>
        </div>

        <!-- Requests -->
        <div id="Requests" class="tab-content">
            <div class="RentalList">

                <% if (rentRequestItems.length > 0) { %>
                    <% rentRequestItems.forEach(function(item) { %>
                        <div class="rentalItem" data-request-id="<%= item.id %>">
                            <div class="rentalInfo">
                                <div class="renterDetails">
                                    <strong class="renterName"><%= item.owner_name %></strong>
                                </div>
                                <div class="itemDetails">
                                    <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                    <h2 class="itemName"><%= item.item_name %></h2>
                                </div>
                            </div>
                            <div class="completeAction">
                                <button class="cancel-btn">Cancel</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No pending requests available.</p>
                <% } %>

            </div>
        </div>

        <!-- Confirmation Modal -->
        <div id="cancel-modal" class="modal">
            <div class="modal-content" style="width: 40%;">
                <h3>Are you sure you want to cancel this request?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="cancel-submit">Confirm</button>
                    <button class="btn-no" id="cancel-confirm">Cancel</button>
                </div>
            </div>
        </div>

        <!--FIXME:Toast Notification  DARKBG NOT WORKING-->
        <div class="overlay" id="modal-overlay"></div>
        <div id="cancelToast" class="toast">Request Cancelled Successfully!</div>

        <!-- <pre><%= JSON.stringify(ongoingRentItems, null, 2) %></pre> -->
        <!-- On Going Modal -->
        <div id="On Going" class="tab-content">
            <div class="RentalList">

                <% if (ongoingRentItems.length > 0) { %>
                    <% ongoingRentItems.forEach(function(item) { %>
                        <div class="rentalItem">
                            <div class="rentalInfo">
                                <div class="renterDetails">
                                    <strong class="renterName"><%= item.owner_name %></strong>
                                </div>
                                <div class="itemDetails">
                                    <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                    <h2 class="itemName"><%= item.item_name %></h2>
                                </div>
                                <div class="rentalDurationContainer">
                                    <strong class="rentalDuration"><%= formatDateRange(item.start_date, item.end_date) %></strong>
                                    <strong>•</strong>
                                    <strong class="MOD"><%= item.mode_of_delivery %></strong>
                                </div>
                            </div>
                            <div class="completeAction">
                                <button class="review-btn" data-id="review-btn-<%= item.id %>">Done</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No pending requests available.</p>
                <% } %>
            </div>
        </div>

        <!-- Modal for Review -->
        <div id="review-modal" class="modal">
            <div class="modal-content" style="text-align: left">
                <h2>Review for Owner</h2>
                <form id="review-form">
                    <label for="rating">Rating:</label>
                    <br/>
                    <div class="stars">
                        <span class="star2" data-value="1">★</span>
                        <span class="star2" data-value="2">★</span>
                        <span class="star2" data-value="3">★</span>
                        <span class="star2" data-value="4">★</span>
                        <span class="star2" data-value="5">★</span>
                    </div>
                    <br/>
                    <label for="description">Describe Your Experience</label>
                    <br/>
                    <textarea id="review-description" name="review_description" rows="4" cols="50"></textarea>
                    <br/>
                    <button id="submit-rev" type="submit">Submit</button>
                    <button id="cancel-rev" type="button">Cancel</button>
                </form>
            </div>
        </div>

        <div id="overlay" class="overlay"></div>
        <div id="success-container1" class="success-container1">
            <div id="success-message1" class="success-message1">
                <p>Request accepted successfully!</p>
            </div>
        </div>

        <!-- Accept Confirmation Modal -->
        <div id="confirmation-modal1" class="confirmation-modal1">
            <div class="confirmation-box1">
                <h2 class="accept-text2">Are you sure you want to <span class="accept-text1">accept</span>
                    this
                    request?</h2>
                <p class="note1">*Note: Remember to ask for Valid ID upon transaction*</p>
                <div class="button-container1">
                    <button id="yes-btn1" class="yes-btn1">Yes</button>
                    <button id="no-btn1" class="no-btn1">No</button>
                </div>
            </div>
        </div>

        <!-- Decline Confirmation Modal -->
        <div id="decline-confirmation-modal1" class="confirmation-modal1">
            <div class="confirmation-box1">
                <h2>Are you sure you want to <span class="decline-text1">decline</span> this request?</h2>
                <div class="button-container1">
                    <button id="decline-yes-btn1" class="yes-btn1">Yes</button>
                    <button id="decline-no-btn1" class="no-btn1">No</button>
                </div>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div id="confirm-modal" class="modal">
            <div class="modal-content">
                <h3>Are you sure you want to submit this review?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="confirm-submit">Confirm</button>
                    <button class="btn-no" id="cancel-confirm">Cancel</button>
                </div>
            </div>
        </div>

        <!-- Toast Notification -->
        <div id="toast" class="toast">Review Submitted Successfully!</div>

        <!-- Review Modal -->
        <div id="Review" class="tab-content" style="display: none;">
            <div class="rentalItem">
                <div class="rentalInfo">
                    <div class="renterDetails">
                        <strong>Renter's Name</strong>
                    </div>
                    <div class="itemDetails">
                        <h2 class="" style="white-space: normal">HAHAHAHAAHAHAH</h2>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<!--JavaScript-->
<script>
    class RentalRequest {
        constructor(id) {
            this.id = id;
            this.acceptBtn = document.querySelector(`[data-id="accept-btn-${id}"]`);
            this.declineBtn = document.querySelector(`[data-id="decline-btn-${id}"]`);
            this.confirmationModal = document.getElementById("confirmation-modal1");
            this.declineConfirmationModal = document.getElementById("decline-confirmation-modal1");
            this.overlay = document.getElementById("overlay");
            this.successContainer = document.getElementById("success-container1");
            this.declineContainer = document.getElementById("decline-container1");

            this.reviewButton = document.querySelector(`[data-id="review-btn-${id}"]`)
            this.reviewDescription = document.querySelector('#review-description')
            this.reviewModal = document.querySelector('#review-modal')
            this.submitReviewButton = document.getElementById('submit-rev')
            this.cancelReviewButton = document.getElementById('cancel-rev')

            this.cancelConfirmButton = document.querySelector('#cancel-confirm')
            this.confimModal = document.querySelector('#confirm-modal')

            // Getting the current data-id
            this.dataId = 0

            // Star rating
            this.selectedRating = 0;

            this.addEventListeners();
        }

        addEventListeners() {
            if (this.acceptBtn) {
                this.acceptBtn.addEventListener("click", (event) => {
                    this.dataId = event.target.getAttribute('data-id').replace("accept-btn-", "");
                    this.showModal("accept");
                })
            }

            if (this.declineBtn) {
                this.declineBtn.addEventListener("click", () => {
                    this.dataId = event.target.getAttribute('data-id').replace("decline-btn-", "");
                    this.showModal("decline")
                });
            }

            if (this.reviewButton) {
                this.reviewButton.addEventListener('click', () => {
                    this.dataId = event.target.getAttribute('data-id').replace('review-btn-', '');
                    this.showModal('review-modal')
                });
            }

            // Handle Review Submission
            if (this.submitReviewButton) {
                this.submitReviewButton.addEventListener('click', (event) => {
                    event.preventDefault();

                    if (selectedRating === 0) {
                        showToast("Please select a star rating before submitting.", "error");
                        // return;
                    }

                    // confirmModal.style.display = "flex"; // Show confirmation modal
                })
            }

            if (this.cancelReviewButton) {
                this.cancelReviewButton.addEventListener('click', (event) => {
                    event.preventDefault()
                    updateStars(0)
                    this.reviewDescription.value = ''
                })
            }

            // Cancel confirmation modal
            if (this.cancelConfirmButton) {
                this.cancelConfirmButton.addEventListener('click', () => {
                    confirmModal.style.display = "none";
                })

                // cancelConfirm.addEventListener("click", function () {
                //     confirmModal.style.display = "none";
                // });

            }

            // Confirm submission
            // confirmSubmit.addEventListener("click", function () {
            //     confirmModal.style.display = "none";
            //     reviewModal.style.display = "none"; // Hide review modal
            //     showToast("Review Submitted Successfully!");
            //     selectedRating = 0; // Reset rating
            //     updateStars(0);
            // })
        }

        showModal(action) {
            // this.overlay.style.display = "block";

            if (action === "accept") {
                this.confirmationModal.style.display = "block";

                document.getElementById("yes-btn1").onclick = () => this.confirmAccept();
                document.getElementById("no-btn1").onclick = () => this.hideModals();
            } else if (action === "decline") {
                this.declineConfirmationModal.style.display = "block";

                document.getElementById("decline-yes-btn1").onclick = () => this.confirmDecline();
                document.getElementById("decline-no-btn1").onclick = () => this.hideModals();
            } else if (action === 'review-modal') {
                this.reviewModal.style.display = "block";

                document.getElementById('submit-rev').onclick = () => {
                    this.submitReview();
                }

                document.getElementById('cancel-rev').onclick = () => this.hideModals();
            }
        }

        async confirmAccept() {
            try {
                await fetch(`http://localhost:8000/api/user/my-items/rental-requests/approved`, {
                    method: "PATCH",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({rental_transaction_id: this.dataId}),
                });
            } catch (error) {
                alert(error.message);
            }
            this.confirmationModal.style.display = "none";
            this.successContainer.style.display = "block";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.successContainer.style.display = "none";

                window.location.reload()
            }, 3000);
        }

        confirmDecline() {
            this.declineConfirmationModal.style.display = "none";
            this.declineContainer.style.display = "block";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.declineContainer.style.display = "none";
            }, 3000);
        }

        hideModals() {
            this.confirmationModal.style.display = "none";
            this.declineConfirmationModal.style.display = "none";
            this.overlay.style.display = "none";
            this.reviewModal.style.display = 'none'
        }

        async submitReview() {
            const rentTransactionId = this.dataId

            try {
                await fetch(`http://localhost:8000/api/user/my-requests/return-items/${rentTransactionId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        stars: selectedRating,
                        description: this.reviewDescription.value,
                    })
                })
            } catch (error) {
                alert(error.message);
            }

            this.reviewModal.style.display = "none";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.successContainer.style.display = "none";

                window.location.reload()
            }, 3000);

        }
    }

    // Initialize rental requests for existing items
    document.querySelectorAll(".review-btn").forEach((button) => {
        const id = button.dataset.id.split("-").pop(); // Extracts the unique ID from data-id
        new RentalRequest(id);
    });

    document.addEventListener("DOMContentLoaded", async function () {
        await loadActiveTab(); // Auto load data for the active tab

        // "Cancel All" BTN EVENT LISTENER
        document.getElementById("cancel-all").addEventListener("click", async function () {
            try {
                const activeTab = document.querySelector(".tablinks.active").dataset.api; // Get active tab's API
                const response = await fetch("/api/cancel-all", { //ready na to juls for api, adjust mo nalang if diff api gagamitin mo.
                    method: "DELETE",                               //eto rin juls, adjust mo nalang din, pwede rin POST method if server restriced kase app
                    headers: {"Content-Type": "application/json"},
                });

                if (response.ok) {
                    alert("All rentals have been canceled.");
                    // await fetchRents(activeTab, activeTab === "/api/my-rents" ? "request-container" : "review-container"); // Refresh only the active tab
                }
            } catch (error) {
                console.error("Error canceling all rentals:", error);
            }
        });
    });

    // LOAD ACTIVE TAB DATA AUTOMATICALLY
    async function loadActiveTab() {
        const activeTab = document.querySelector(".tablinks.active")?.dataset.api || "/api/my-rents"; // Default to "my-rents"
        // await fetchRents(activeTab, activeTab === "/api/my-rents" ? "request-container" : "review-container");
    }

    // CANCEL RENT FUNCTION SA REVIEWS TAB
    async function cancelRent(rentId, containerId) {
        try {
            const response = await fetch(`/api/cancel-rent/${rentId}`, {
                method: "POST",
                headers: {"Content-Type": "application/json"},
            });
            if (response.ok) {
                alert("Rental canceled successfully.");
                // await fetchRents(containerId === "request-container" ? "/api/my-rents" : "/api/my-reviews", containerId); //eto change api if diff api gagamitin mo
            }
        } catch (error) {
            console.error("Error canceling rent:", error);
        }
    }

    // OPEN TAB FUNCTION
    function openTab(evt, tabName, apiUrl) {
        var i, tabs, buttons;
        tabs = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabs.length; i++) {
            tabs[i].style.display = "none";
        }
        buttons = document.getElementsByClassName("tablinks");
        for (i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove("active");
        }

        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.classList.add("active");
        evt.currentTarget.dataset.api = apiUrl; //STORE API ENDPOINT SA BUTTON
        // fetchRents(apiUrl, tabName === "request-container" ? "request-container" : "review-container");
    }

    // Review Modal Functionality
    // const reviewBtn = document.getElementById("review-btn");
    // const reviewModal = document.getElementById("review-modal");
    const confirmModal = document.getElementById("confirm-modal");
    // const cancelConfirm = document.getElementById("cancel-confirm");
    const toast = document.getElementById("toast");

    // Show review modal
    // reviewBtn.addEventListener("click", function () {
    //     reviewModal.style.display = "flex";
    // });

    // Hide review modal
    // cancelRev.addEventListener("click", function () {
    //     reviewModal.style.display = "none";
    // });

    // Star Rating System
    const stars = document.querySelectorAll(".star2");
    let selectedRating = 0;

    stars.forEach((star) => {
        star.addEventListener("click", function () {
            selectedRating = parseInt(this.getAttribute("data-value")); // Store the selected rating
            updateStars(selectedRating);
        });

        star.addEventListener("mouseover", function () {
            updateStars(parseInt(this.getAttribute("data-value")));
        });

        star.addEventListener("mouseout", function () {
            updateStars(selectedRating);
        });
    });

    function updateStars(rating) {
        stars.forEach((star, index) => {
            star.classList.toggle("active", index < rating);
        });
    }


    // Hide modal when clicking outside
    // window.addEventListener("click", function (event) {
    //     if (event.target === reviewModal) {
    //         reviewModal.style.display = "block";
    //     }
    //     if (event.target === confirmModal) {
    //         confirmModal.style.display = "none";
    //     }
    // });

    // Toast Notification Function
    function showToast(message, type = "success") {
        toast.innerText = message;
        toast.classList.add("show");

        // Apply different styles based on type
        if (type === "error") {
            toast.classList.add("error");
        } else {
            toast.classList.remove("error");
        }

        setTimeout(function () {
            toast.classList.remove("show");
        }, 3000);
    }

    document.addEventListener("DOMContentLoaded", function () {
        const cancelBtns = document.querySelectorAll(".cancel-btn");
        const cancelModal = document.getElementById("cancel-modal");
        const cancelSubmit = document.getElementById("cancel-submit");
        // const cancelConfirm = document.getElementById("cancel-confirm");
        const modalOverlay = document.getElementById("modal-overlay");
        const cancelToast = document.getElementById("cancelToast");

        let selectedRequestId = null;
        let selectedRequestElement = null;

        // Show modal and overlay when cancel button is clicked
        cancelBtns.forEach(btn => {
            btn.addEventListener("click", function () {
                // Find the parent rental item
                selectedRequestElement = this.closest('.rentalItem');
                selectedRequestId = selectedRequestElement.getAttribute("data-request-id");

                // Show modal and overlay
                cancelModal.style.display = "block";
                modalOverlay.style.display = "block";
                document.body.style.overflow = "hidden";
            });
        });

        // Delete request when confirm is clicked
        cancelSubmit.addEventListener("click", async function () {
            if (selectedRequestId) {
                try {
                    const response = await fetch(`/api/user/my-requests/cancel/${selectedRequestId}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();

                    if (result.success) {
                        modalOverlay.style.display = "block";
                        showToast();

                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                } catch (error) {
                    console.error("Error canceling request:", error);
                }
            }

            hideModal();
        });

        // cancelConfirm.addEventListener("click", function () {
        //     hideModal();
        // });

        function showToast() {
            cancelToast.classList.add("show");
        }

        function hideModal() {
            cancelModal.style.display = "none";
            modalOverlay.style.display = "none";
            document.body.style.overflow = "";
        }

        modalOverlay.addEventListener("click", function () {
            hideModal();
        });
    });

    //logout
    document.addEventListener("DOMContentLoaded", function () {
        const logoutLink = document.getElementById("logout");
        const modal = document.getElementById("logout-modal");
        const confirmLogout = document.getElementById("confirm-logout");
        const cancelLogout = document.getElementById("cancel-logout");

        // Ensure modal starts hidden
        modal.style.display = "none";

        // Show modal when logout is clicked
        logoutLink.addEventListener("click", function (event) {
            event.preventDefault(); // Prevents default link behavior
            modal.style.display = "flex"; // Show modal only on click
        });

        // Redirect when "Yes" is clicked
        confirmLogout.addEventListener("click", function () {
            window.location.href = "/logout"; // Adjust logout URL
        });

        // Close modal when "No" is clicked
        cancelLogout.addEventListener("click", function () {
            modal.style.display = "none"; // Hide modal
        });
    });
</script>