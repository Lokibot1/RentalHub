<link rel="stylesheet" href="/css/archives.css"/>
<link rel="web icon" type="png" href="/images/webicon.png">
<!--Navigation Bar-->
<%- include('../partials/user/header-navbar.ejs'); %>

<div class="main">
    <!--Sidebar-->
    <%- include('../partials/user/sidebar.ejs'); %>

    <!--Main Content-->
    <div class="content">
        <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'PendingPosts')">
                Pending Posts
            </button>
            <button class="tablinks" onclick="openTab(event, 'Items')">
                Posted Items
            </button>
            <button class="tablinks" onclick="openTab(event, 'RentalRequests')">
                Rental Requests
            </button>
            <button class="tablinks" onclick="openTab(event, 'OnTransactions')">
                On Going Transactions
            </button>

            <!--Tab Content-->
            <!--Pending Post-->
            <div id="PendingPosts" class="tab-content">
                <div class="shoppingList">

                    <% if (pendingPosts.length > 0) { %>
                        <% pendingPosts.forEach(function(item) { %>
                            <a href="/user/view-pending/<%= item.product_id %>">
                                <div class="shoppingItem">
                                    <img src="/uploads/<%= item.product_image %>" alt="" class="itemImage"/>
                                    <hr/>
                                    <strong class="itemName">
                                        <%= item.product_name %>
                                    </strong>
                                    <br/>
                                    <div class="item-price-quantity">
                                        <strong class="itemPrice">$<%= item.product_price %></strong>
                                        <br/>
                                        <strong>
                                            <p class="itemQuantity"><%= item.product_quantity %> left</p>
                                        </strong>
                                    </div>
                                    <strong class="itemLocation">
                                        <%= item.owner_location %>
                                    </strong>
                                </div>
                            </a>
                        <% }); %>
                    <% } else { %>
                        <p>No Pending Posts available.</p>
                    <% } %>
                </div>
            </div>


            <!-- Items Posted -->
            <div id="Items" class="tab-content" style="display: none">
                <div class="shoppingList">
                    <% if (approvedPosts.length > 0) { %>
                        <% approvedPosts.forEach(function(item) { %>
                            <div class="shoppingItem">
                                <!-- Delete Icon with data-item-id -->
                                <img src="/images/trashcan.png" 
                                     alt="Delete" 
                                     class="itemDelete" 
                                     data-item-id="<%= item.item_id %>" />
            
                                <a href="/user/update-listing/<%= item.item_id %>">
                                    <hr/>
                                    <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                    <hr/>
                                    <strong class="itemName"><%= item.item_name %></strong>
                                    <br/>
                                    <strong class="itemLocation"><%= item.item_location %></strong>
                                    <div class="item-price-quantity">
                                        <strong class="itemPrice">₱ <%= item.item_price %></strong>
                                        <strong>
                                            <p class="itemQuantity"><%= item.item_quantity %> left</p>
                                        </strong>
                                    </div>
                                </a>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No Posted Items available.</p>
                    <% } %>
                </div>
            </div>
            
            <!-- Archive Confirmation Modal -->
            <div id="archiveModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <p><strong>Are you sure you want to <span style="color: #990000;">archive</span> this item?</strong>
                    </p>
                    <div class="modal-buttons">
                        <button id="confirmDelete" class="btn-yes">Yes</button>
                        <button id="cancelDelete" class="btn-no">No</button>
                    </div>
                </div>
            </div>

            <div id="successModal" class="modal" style="display: none;">
                <div class="success-message1">
                    <p><strong>Item archived successfully!</strong></p>
                </div>
            </div>


            <!-- Rental Requests -->
            <div id="RentalRequests" class="tab-content" style="display: none">
                <div class="RentalList">

                    <%
                    function formatDateRange(startDate, endDate) {
                        const options = {year: 'numeric', month: 'long', day: 'numeric'};

                        const start = new Date(startDate).toLocaleDateString('en-US', options);
                        const end = new Date(endDate).toLocaleDateString('en-US', options);

                        return `${start} - ${end}`;
                    }

                    // This function formats the date to "Month Day, Year"
                    // Example: "April 4, 2025"
                    function formatDate(dateString) {
                        const options = { year: "numeric", month: "long", day: "numeric" };
                        return new Date(dateString).toLocaleDateString("en-US", options);
                    }
                    %>

                    <% if (rentalRequests.length > 0) { %>
                        <% rentalRequests.forEach(function(item) { %>
                            <div class="rentalItem" style="margin-bottom: 10px;">
                                <div class="rentalInfo">
                                    <div class="renterDetails">
                                        <h4 class="renterName"> <%= item.renters_name %> </h4>
                                        <strong> • </strong>
                                        <h4 class="renterLocation"> <%= item.renters_address %> </h4>
                                    </div>
                                    <div class="middle">
                                        <div class="itemDetails">
                                        <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                        <div class="details">
                                            <p class="itemName">Item Name: <%= item.item_name %></p>
                                            <p class="itemLocation">Item Location: <%= item.item_location %></p>
                                            <p class="Quantity">Quantity: <%= item.item_quantity %></p>
                                            <p class="postedDate">Requested on: <%= formatDate(item.created_at) %></p>
                                        </div>
                                    </div>
                                    <div class="rentalAction">
                                        <button class="accept-btn" data-id="accept-btn-<%= item.rent_transaction_id %>">
                                            ✓
                                        </button>
                                        <button class="decline-btn" data-id="decline-btn-<%= item.rent_transaction_id %>">
                                            ✗
                                        </button>
                                    </div>
                                    </div>
                                    <div class="rentalDurationContainer">
                                        <h4 class="rentalDuration"><%= formatDateRange(item.start_date, item.end_date) %></h4>
                                        <h4>•</h4>
                                        <h4 class="MOD"><%= item.mode_of_delivery %></h4>
                                    </div>
                                </div>

                                <!-- Dark Background Overlay -->
                                <div id="overlay" class="overlay"></div>
                                
                            </div>

                        <% }); %>
                    <% } else { %>
                        <p>No Rental Requests available.</p>
                    <% } %>

                    <div id="overlay" class="overlay"></div>
                    <div id="success-container1" class="success-container1">
                        <div id="success-message1" class="success-message1">
                            <p>Request accepted successfully!</p>
                        </div>
                    </div>

                    <!-- Accept Confirmation Modal -->
                    <div id="confirmation-modal1" class="confirmation-modal1">
                        <div class="confirmation-box1">
                            <h2 class="accept-text2">Are you sure you want to <span class="accept-text1">accept</span>
                                this
                                request?</h2>
                            <p class="note1">*Note: Remember to ask for Valid ID upon transaction*</p>
                            <div class="button-container1">
                                <button id="yes-btn1" class="yes-btn1">Yes</button>
                                <button id="no-btn1" class="no-btn1">No</button>
                            </div>
                        </div>
                    </div>

                    <!-- Decline Confirmation Modal -->
                    <!-- <div id="decline-confirmation-modal1" class="confirmation-modal1">
                        <div class="confirmation-box1">
                            <h2>Are you sure you want to <span class="decline-text1">decline</span> this request?</h2>
                            <div class="button-container1">
                                <button id="decline-yes-btn1" class="yes-btn1">Yes</button>
                                <button id="decline-no-btn1" class="no-btn1">No</button>
                            </div>
                        </div>
                    </div> -->

                    <div id="overlay" class="overlay"></div>
                    <div id="decline-container1" class="decline-container1">
                        <div id="decline-message1" class="decline-message1">
                            <p>Request declined successfully!</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Decline Confirmation Modal -->
        <div id="decline-confirmation-modal1" class="confirmation-modal1">
            <div class="confirmation-box1">
                <h2>Are you sure you want to <span class="decline-text1">decline</span> this request?</h2>
                <div class="button-container1">
                    <button id="decline-yes-btn1" class="yes-btn1">Yes</button>
                    <button id="decline-no-btn1" class="no-btn1">No</button>
                </div>
            </div>
        </div>


        <!-- Ongoing Transactions -->
        <div id="OnTransactions" class="tab-content" style="display: none">
            <div class="RentalList">
                
                <% if (ongoingTransactions.length > 0) { %>
                    <% ongoingTransactions.forEach(function(item) { %>
                        <div class="rentalItem">
                            <div class="rentalInfo">
                                <div class="renterDetails">
                                    <h4 class="renterName"> <%= item.renters_name %> </h4>
                                    <strong> • </strong>
                                    <h4 class="renterLocation"> <%= item.renters_address %> </h4>
                                </div>
                                <div class="itemDetails">
                                    <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                    <div class="details">
                                        <p class="itemName">Item Name: <%= item.item_name %></p>
                                        <p class="itemLocation">Item Location: <%= item.item_location %></p>
                                        <p class="Quantity">Quantity: <%= item.rental_quantity %> </p>
                                        <p class="postedDate">Requested on: <%= formatDate(item.created_at) %></p>
                                    </div>
                                </div>
                                <div class="rentalDurationContainer">
                                    <strong class="rentalDuration"><%= formatDateRange(item.start_date, item.end_date) %></strong>
                                    <strong>•</strong>
                                    <strong class="MOD"><%= item.mode_of_delivery %></strong>
                                </div>
                            </div>
                            <div class="completeAction">
                                <button id="report-btn">
                                    File a Report
                                </button>
                                <!--FIX ME: width problem, no submit requirements, no darkbg overlay-->
                                <button class="review-btn" data-id="review-btn-<%= item.rent_transaction_id %>">
                                    Done
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No On Going Transactions available.</p>
                <% } %>
            </div>
        </div>

        <!--Report Modal-->
        <div id="modal-overlay" class="overlay"></div>
        <div id="report-modal" class="modal">
            <div class="modal-content" style="text-align: left">
                <h2>Report Renter</h2>
                <form id="report-form">
                    <label>Reason:</label>
                    <div>
                        <input type="checkbox" id="damageToItem" name="reason" value="damageToItem"/>
                        <label for="damageToItem">Damage to Item</label>
                    </div>
                    <div>
                        <input type="checkbox" id="lateReturn" name="reason" value="lateReturn"/>
                        <label for="lateReturn">Late Return of Item</label>
                    </div>
                    <div>
                        <input type="checkbox" id="notReturned" name="reason" value="notReturned"/>
                        <label for="notReturned">Item Not Retured</label>
                    </div>
                    <div>
                        <input type="checkbox" id="noShow" name="reason" value="noShow"/>
                        <label for="noShow">No Show</label>
                    </div>
                    <div>
                        <input type="checkbox" id="duplicate" name="reason" value="duplicate"/>
                        <label for="duplicate">Duplicate</label>
                    </div>
                    <div>
                        <input type="checkbox" id="inappropriate" name="reason" value="inappropriate"/>
                        <label for="inappropriate">Inappropriate</label>
                    </div>
                    <div>
                        <input type="checkbox" id="fraudulent" name="reason" value="fraudulent"/>
                        <label for="fraudulent">Fraudulent</label>
                    </div>
                    <br/>
                    <label for="description">Describe What Happened</label>
                    <br/>
                    <textarea id="description" name="description" rows="4" cols="50"></textarea>
                    <br/>
                    <button id="submit-rprt" type="submit">Submit</button>
                    <button id="cancel-rprt" type="button">Cancel</button>
                </form>
            </div>
        </div>


        <!-- Toast Notification -->
        <div id="report-toast" class="toast">Report Submitted Successfully!</div>
        <!-- FIX ME: Report Confirmation Modal, NOT SHOWING  -->
        <div id="confirm-modal" class="modal">
            <div class="modal-content">
                <h3>Are you sure you want to submit this report?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="confirm-submit">Confirm</button>
                    <button class="btn-no" id="cancel-confirm">Cancel</button>
                </div>
            </div>
        </div>        

        <!-- Modal for Review  -->
        <div id="review-modal" class="modal">
            <div class="modal-content" style="text-align: left">
                <h2>Review for Renter</h2>
                <form id="review-form">
                    <label for="rating">Rating:</label>
                    <br/>
                    <div class="stars">
                        <span class="star2" data-value="1">★</span>
                        <span class="star2" data-value="2">★</span>
                        <span class="star2" data-value="3">★</span>
                        <span class="star2" data-value="4">★</span>
                        <span class="star2" data-value="5">★</span>
                    </div>
                    <br/>
                    <label for="review-description">Describe Your Experience</label>
                    <br/>
                    <textarea id="review-description" name="review_description" rows="4" cols="50"></textarea>
                    <br/>
                    <button id="submit-rev" type="submit">Submit</button>
                    <button id="cancel-rev" type="button">Cancel</button>
                </form>
            </div>
        </div>

        <!-- FIX ME: Review Confirmation Modal, NOT SHOWING  -->
        <div id="confirm-modal1" class="modal">
            <div class="modal-content">
                <h3>Are you sure you want to submit this review?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="confirm-review">Confirm</button>
                    <button class="btn-no" id="cancel-review">Cancel</button>
                </div>
            </div>
        </div>

        <div class="modalOverlay" id="modalOverlay"></div>
        <div id="review-toast" class="toast">Review Submitted Successfully!</div>
    </div>
</div>

<!--Error Modal when archiving cause of ongoung transactions-->
<div id="errorModal" class="error-modal">
    <div class="error-content">
      <p style="color: #800020;">Archive failed due to On Going Transactions for this item</p>
      <button onclick="closeErrorModal()" class="close-button">I Understand</button>
    </div>
</div>

<!-- JavaScript -->
<script>
// archive function
document.addEventListener('DOMContentLoaded', function () {
    const deleteButtons = document.querySelectorAll('.itemDelete');
    const archiveModal = document.getElementById('archiveModal');
    const successModal = document.getElementById('successModal');
    const overlay = document.getElementById('overlay');
    const confirmButton = document.getElementById('confirmDelete');
    const cancelButton = document.getElementById('cancelDelete');
    const errorModal = document.getElementById('errorModal');
    let currentItem = null;
    let itemId = 0;

    // Show delete confirmation modal when trash icon is clicked
    deleteButtons.forEach(button => {
        button.addEventListener('click', function (e) {
            e.preventDefault();  // Stop any link redirection
            e.stopPropagation(); // Stop event from bubbling

            itemId = this.getAttribute('data-item-id'); // Get item ID
            currentItem = this.closest('.shoppingItem'); // Get the whole item block

            if (!currentItem) {
                console.error("Error: Could not find the parent '.shoppingItem' element.");
                return;
            }

            console.log("Archive button clicked for item ID:", itemId);
            
            // Show the delete confirmation modal
            archiveModal.style.display = 'block';
            overlay.style.display = 'block';
        });
    });

// Confirm archive
confirmButton.addEventListener('click', async function () {
    console.log("Archive confirmation button clicked");
    
    if (currentItem) {
        console.log("Current item found:", itemId);
        try {
            // First, hide the archive modal
            console.log("Hiding archive modal");
            archiveModal.style.display = 'none';
            
            console.log("Sending fetch request to archive item:", itemId);
            const response = await fetch(`http://localhost:8000/api/user/my-items/archive-item/${itemId}`, {
                method: 'PATCH'
            });

            console.log("Fetch response received:", response.status);
            const data = await response.json();
            console.log("Response data:", data);
            
            // Check if the item was actually archived
            // Make an additional request to check if the item's archive status changed
            const checkResponse = await fetch(`http://localhost:8000/api/user/my-items/${itemId}`, {
                method: 'GET'
            });
            
            const itemData = await checkResponse.json();
            console.log("Item data after archive attempt:", itemData);
            
            // If the item has is_archived = 1, it was successfully archived
            if (data.success && itemData.item && itemData.item.is_archived === 1) {
                console.log("Archive successful, hiding item");
                currentItem.style.display = 'none'; // Hide item from list
                
                console.log("Showing success modal");
                successModal.style.display = 'block';
                overlay.style.display = 'block';

                setTimeout(() => {
                    console.log("Timeout: hiding success modal");
                    overlay.style.display = 'none';
                    successModal.style.display = 'none';
                }, 3000);
            } else {
                // If the server said success but the item wasn't archived,
                // it's likely because there's an ongoing transaction
                console.log("Archive failed due to ongoing transaction");
                
                // Ensure success modal is hidden
                successModal.style.display = 'none';
                
                // Show error modal
                console.log("Showing error modal");
                document.getElementById('errorModal').style.display = 'flex';
                overlay.style.display = 'block';
            }
        } catch (error) {
            console.error("Fetch error:", error);
            
            // Ensure success modal is hidden
            successModal.style.display = 'none';
            
            // Show error modal
            console.log("Showing error modal due to exception");
            document.getElementById('errorModal').style.display = 'flex';
            overlay.style.display = 'block';
        }
    } else {
        console.error("Error: No item selected for archiving.");
    }
});

// Function to close the error modal
window.closeErrorModal = function() {
    console.log("Close button is clicked");
    document.getElementById('errorModal').style.display = 'none';
    overlay.style.display = 'none';
}

    // Cancel delete
    cancelButton.addEventListener('click', function () {
        archiveModal.style.display = 'none';
        overlay.style.display = 'none';
    });

    // Hide modals when clicking outside
    if (overlay) {
        overlay.addEventListener('click', function (event) {
            if (event.target === overlay) {
                archiveModal.style.display = 'none';
                overlay.style.display = 'none';
                successModal.style.display = 'none';
            }
        });
    }
});

    // OPEN TAB FUNCTION
    function openTab(evt, tabName) {
        let i, tabs, buttons;
        tabs = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabs.length; i++) {
            tabs[i].style.display = "none";
        }
        buttons = document.getElementsByClassName("tablinks");
        for (i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove("active");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.classList.add("active");
    }

    // FETCH USER LISTINGS AND SORT THEM INTO TABS
    async function fetchAndSortListings() {
        try {
            const response = await fetch("/api/user-listings"); // Fetch all user listings
            const listings = await response.json();

            // Containers for each tab
            const pendingContainer = document.getElementById("PendingPosts");
            const itemsContainer = document.getElementById("Items");
            const rentalRequestsContainer =
                document.getElementById("RentalRequests");
            const transactionsContainer =
                document.getElementById("OnTransactions");
            const ratingContainer = document.getElementById("Reviews");

            // Clear previous data
            pendingContainer.innerHTML = "";
            itemsContainer.innerHTML = "";
            rentalRequestsContainer.innerHTML = "";
            transactionsContainer.innerHTML = "";
            ratingContainer.innerHTML = "";

            if (listings.length === 0) {
                pendingContainer.innerHTML = "<p>No listings available.</p>";
                return;
            }

            listings.forEach((listing) => {
                const listingCard = document.createElement("div");
                listingCard.classList.add("listing-card");
                listingCard.innerHTML = `
          <p class="listing-title">${listing.title}</p>
          <div class="listing-item">
            <img src="${listing.image || "placeholder.png"
                }" alt="Listing Image" class="listing-image">
            <span class="listing-name">${listing.name}</span>
          </div>
          <button class="cancel-btn" onclick="cancelListing('${listing.id
                }')">Cancel</button>
        `;

                switch (listing.status) {
                    case "pending":
                        pendingContainer.appendChild(listingCard);
                        break;
                    case "approved":
                        itemsContainer.appendChild(listingCard);
                        break;
                    case "rental_request":
                        rentalRequestsContainer.appendChild(listingCard);
                        break;
                    case "on_transaction":
                        transactionsContainer.appendChild(listingCard);
                        break;
                    case "completed":
                        ratingContainer.appendChild(listingCard);
                        break;
                }
            });
        } catch (error) {
            console.error("Error fetching listings:", error);
        }
    }

    // CANCEL A SINGLE LISTING FUNCTION
    async function cancelListing(listingId) {
        try {
            const response = await fetch(`/api/cancel-listing/${listingId}`, {
                method: "DELETE",
                headers: {"Content-Type": "application/json"},
            });
            if (response.ok) {
                alert("Listing canceled successfully.");
                await fetchAndSortListings();
            }
        } catch (error) {
            console.error("Error canceling listing:", error);
        }
    }

    // CANCEL ALL LISTINGS FUNCTION
    async function cancelAllListings() {
        try {
            const activeTab = document.querySelector(".tablinks.active").id;
            let status = "";

            switch (activeTab) {
                case "PendingPosts":
                    status = "pending";
                    break;
                case "Items":
                    status = "approved";
                    break;
                case "RentalRequests":
                    status = "rental_request";
                    break;
                case "OnTransactions":
                    status = "on_transaction";
                    break;
                case "Reviews":
                    status = "completed";
                    break;
            }

            const response = await fetch(`/api/cancel-all/${status}`, {
                method: "DELETE",
                headers: {"Content-Type": "application/json"},
            });

            if (response.ok) {
                alert("All listings in this category have been canceled.");
                await fetchAndSortListings();
            }
        } catch (error) {
            console.error("Error canceling all listings:", error);
        }
    }

    // ADD EVENT LISTENER TO "CANCEL ALL" BUTTONS
    document.querySelectorAll(".cancel-btn").forEach((btn) => {
        btn.addEventListener("click", cancelAllListings);
    });
    //

    //REPORT MODAL FIX ME: NO OVERLAY ON TOAST + NO CONDITIONS
    document.addEventListener("DOMContentLoaded", function () {
        const reportBtn = document.getElementById("report-btn");
        const reportModal = document.getElementById("report-modal");
        const modalOverlay = document.getElementById("modal-overlay");
        const submitRprt = document.getElementById("submit-rprt");
        const cancelRprt = document.getElementById("cancel-rprt");
        const toast = document.getElementById("report-toast");

        // Function to show modal
        function showModal() {
            reportModal.style.display = "block";
            modalOverlay.style.display = "block";
        }

        // Function to hide modal
        function hideModal() {
            reportModal.style.display = "none";
            modalOverlay.style.display = "none";
        }

        // Function to show toast notification
        function showToast() {
            toast.classList.add("show");
            setTimeout(() => {
                toast.classList.remove("show");
            }, 3000); // Hide toast after 3 seconds
        }

        // Event listener for report button
        if (reportBtn) {
            reportBtn.addEventListener("click", showModal);
        }

        // Event listener for cancel button
        cancelRprt.addEventListener("click", hideModal);

        // Event listener for submit button
        submitRprt.addEventListener("click", function (event) {
            event.preventDefault(); // Prevent form submission
            hideModal();
            showToast();
        });

        // Close modal when clicking outside
        modalOverlay.addEventListener("click", hideModal);
    });


    class RentalRequest {
        constructor(id) {
            this.id = id;
            this.acceptBtn = document.querySelector(`[data-id="accept-btn-${id}"]`);
            this.declineBtn = document.querySelector(`[data-id="decline-btn-${id}"]`);
            this.confirmationModal = document.getElementById("confirmation-modal1");
            this.declineConfirmationModal = document.getElementById("decline-confirmation-modal1");
            this.overlay = document.getElementById("overlay");
            this.successContainer = document.getElementById("success-container1");
            this.declineContainer = document.getElementById("decline-container1");

            this.reviewButton = document.querySelector(`[data-id="review-btn-${id}"]`)
            this.reviewDescription = document.querySelector('#review-description')
            this.reviewModal = document.querySelector('#review-modal')

            // Getting the current data-id
            this.dataId = 0

            this.addEventListeners();
        }

        addEventListeners() {
            if (this.acceptBtn) {
                this.acceptBtn.addEventListener("click", (event) => {
                    this.dataId = event.target.getAttribute('data-id').replace("accept-btn-", "");
                    this.showModal("accept");
                })
            }

            if (this.declineBtn) {
                this.declineBtn.addEventListener("click", () => {
                    this.dataId = event.target.getAttribute('data-id').replace("decline-btn-", "");
                    this.showModal("decline")
                });
            }

            if (this.reviewButton) {
                this.reviewButton.addEventListener('click', () => {
                    this.dataId = event.target.getAttribute('data-id').replace('review-btn-', '');
                    this.showModal('review-modal')
                });
            }
        }

        showModal(action) {
            this.overlay.style.display = "block";

            if (action === "accept") {
                this.confirmationModal.style.display = "block";
                document.getElementById("yes-btn1").onclick = () => this.confirmAccept();
                document.getElementById("no-btn1").onclick = () => this.hideModals();
            } else if (action === "decline") {
                this.declineConfirmationModal.style.display = "block";
                document.getElementById("decline-yes-btn1").onclick = () => this.confirmDecline();
                document.getElementById("decline-no-btn1").onclick = () => this.hideModals();
            } else if (action === 'review-modal') {
                this.reviewModal.style.display = "block";

                document.getElementById('submit-rev').onclick = (event) => {
                    event.preventDefault();
                    document.getElementById('review-modal').style.display = "none";
                    document.getElementById('confirm-modal1').style.display = "block";
                };

                document.getElementById('cancel-rev').onclick = () => this.hideModals();
            }

            // Handle confirmation modal actions
            document.getElementById("confirm-review").onclick = async () => {
                await this.submitReview(); // Submits the review
                document.getElementById("confirm-modal1").style.display = "none"; // Hide confirm modal
                showToast("Review Submitted Successfully!"); // Show toast
            };

            document.getElementById('cancel-review').onclick = () => {
                document.getElementById('confirm-modal1').style.display = "none"; // Close confirm modal
                this.overlay.style.display = "none"; // Hide overlay
            };
        }


        async confirmAccept() {
            try {
                await fetch(`http://localhost:8000/api/user/my-items/rental-requests/approved`, {
                    method: "PATCH",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({rental_transaction_id: this.dataId}),
                });
            } catch (error) {
                alert(error.message);
            }
            this.confirmationModal.style.display = "none";
            this.successContainer.style.display = "block";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.successContainer.style.display = "none";

                window.location.reload()
            }, 3000);
        }

        confirmDecline() {
            this.declineConfirmationModal.style.display = "none";
            this.declineContainer.style.display = "block";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.declineContainer.style.display = "none";
            }, 3000);
        }

        hideModals() {
            this.confirmationModal.style.display = "none";
            this.declineConfirmationModal.style.display = "none";
            this.overlay.style.display = "none";
            this.reviewModal.style.display = 'none'
        }

        async submitReview() {
            const rentTransactionId = this.dataId

            try {
                await fetch(`http://localhost:8000/api/user/my-items/return-items/${rentTransactionId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        stars: selectedRating,
                        description: this.reviewDescription.value,
                    })
                })

                document.getElementById('review-toast').style.display = "block";
                setTimeout(() => {
                    document.getElementById('review-toast').style.display = "none";
                }, 3000);
            } catch (error) {
                alert(error.message);
            }

            this.reviewModal.style.display = "none";

            setTimeout(() => {
                this.overlay.style.display = "none";
                this.successContainer.style.display = "none";

                window.location.reload()
            }, 3000);

        }
    }

    // Initialize rental requests for existing items
    document.querySelectorAll(".accept-btn, .decline-btn, .review-btn").forEach((button) => {
        const id = button.dataset.id.split("-").pop(); // Extracts the unique ID from data-id
        new RentalRequest(id);
    });

    // Function to dynamically add a new rental request
    let rentalItemCount = 1;

    function addRentalItem(renterName, location, itemName, rentalDuration, modeOfDelivery) {
        rentalItemCount++;

        const rentalItem = document.createElement("div");
        rentalItem.classList.add("rentalItem");
        rentalItem.innerHTML = `
            <div class="rentalInfo">
              <div class="renterDetails">
                <strong class="renterName">${renterName}</strong>
                <strong>•</strong>
                <strong class="renterLocation">${location}</strong>
              </div>
              <div class="itemDetails">
                <img src="" alt="" class="itemImage" />
                <h2 class="itemName">${itemName}</h2>
              </div>
              <div class="rentalDurationContainer">
                <strong class="rentalDuration">${rentalDuration}</strong>
                <strong>•</strong>
                <strong class="MOD">${modeOfDelivery}</strong>
              </div>
            </div>

            <div class="rentalAction">
              <button class="accept-btn" data-id="accept-btn-${rentalItemCount}">✓</button>
              <button class="decline-btn" data-id="decline-btn-${rentalItemCount}">✗</button>
            </div>
        `

        document.getElementById("rentalContainer").appendChild(rentalItem);
        new RentalRequest(rentalItemCount);
    }

    document.querySelectorAll('.decline-btn').forEach(button => {
        button.addEventListener('click', async (event) => {
            const rentalTransactionId = event.target.dataset.id.split('-').pop();

            // Show the decline confirmation modal
            const modal = document.getElementById('decline-confirmation-modal1');
            modal.style.display = 'block';

            const yesButton = document.getElementById('decline-yes-btn1');
            const noButton = document.getElementById('decline-no-btn1');

            // When the user clicks "Yes", decline the request
            yesButton.addEventListener('click', async () => {
                const response = await fetch('/api/user/my-items/rental-requests/declined', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({rental_transaction_id: rentalTransactionId})
                });

                const data = await response.json();

                if (data.success) {
                    // Find and remove the rental item from the DOM
                    const rentalItem = event.target.closest('.rentalItem');
                    if (rentalItem) {
                        rentalItem.remove(); // Remove the item from the DOM
                    }

                    // Check if there are any remaining rental requests
                    const rentalItems = document.querySelectorAll('.rentalItem');
                    if (rentalItems.length === 0) {
                        // If no rental requests remain, display the "No Rental Requests available." message
                        const rentalList = document.querySelector('.RentalList');
                        rentalList.innerHTML = '<p>No Rental Requests available.</p>';
                    }
                } else {
                    alert('Failed to decline the rental request.');
                }

                // Close the modal
                modal.style.display = 'none';
            });

            // When the user clicks "No", simply close the modal without doing anything
            noButton.addEventListener('click', () => {
                modal.style.display = 'none'; // Close the modal
            });
        });
    });


    // Review Modal Functionality FIX ME: WIDTH TOO WIDE, DARKBG OVERLAY NOT WORKING
    const confirmModal = document.getElementById("confirm-modal");
    const confirmSubmit = document.getElementById("confirm-submit");
    const cancelConfirm = document.getElementById("cancel-confirm");
    const toast = document.getElementById("toast");

    // Star Rating System
    const stars = document.querySelectorAll(".star2");
    let selectedRating = 0;

    stars.forEach((star) => {
        star.addEventListener("click", function () {
            selectedRating = parseInt(this.getAttribute("data-value")); // Store the selected rating
            updateStars(selectedRating);
        });

        star.addEventListener("mouseover", function () {
            updateStars(parseInt(this.getAttribute("data-value")));
        });

        star.addEventListener("mouseout", function () {
            updateStars(selectedRating);
        });
    });

    function updateStars(rating) {
        stars.forEach((star, index) => {
            star.classList.toggle("active", index < rating);
        });
    }

    // Handle Review Submission
    submitRev.addEventListener("click", function (event) {
        event.preventDefault();

        if (selectedRating === 0) {
            showToast("Please select a star rating before submitting.", "error");
            return;
        }

        confirmModal.style.display = "flex"; // Show confirmation modal
    });

    // Confirm submission
    confirmSubmit.addEventListener("click", function () {
        confirmModal.style.display = "none";
        reviewModal.style.display = "none"; // Hide review modal
        showToast("Review Submitted Successfully!");
        selectedRating = 0; // Reset rating
        updateStars(0);
    });

    // Cancel confirmation modal
    cancelConfirm.addEventListener("click", function () {
        confirmModal.style.display = "none";
    });

    // Toast Notification Function
    function showToast(message, type = "success") {
        toast.innerText = message;
        toast.classList.add("show");

        // Apply different styles based on type
        if (type === "error") {
            toast.classList.add("error");
        } else {
            toast.classList.remove("error");
        }

        setTimeout(function () {
            toast.classList.remove("show");
        }, 3000);
    }



    //logout
    document.addEventListener("DOMContentLoaded", function () {
        const logoutLink = document.getElementById("logout");
        const modal = document.getElementById("logout-modal");
        const confirmLogout = document.getElementById("confirm-logout");
        const cancelLogout = document.getElementById("cancel-logout");

        // Ensure modal starts hidden
        modal.style.display = "none";

        // Show modal when logout is clicked
        logoutLink.addEventListener("click", function (event) {
            event.preventDefault(); // Prevents default link behavior
            modal.style.display = "flex"; // Show modal only on click
        });

        // Redirect when "Yes" is clicked
        confirmLogout.addEventListener("click", function () {
            window.location.href = "/logout"; // Adjust logout URL
        });

        // Close modal when "No" is clicked
        cancelLogout.addEventListener("click", function () {
            modal.style.display = "none"; // Hide modal
        });
    });
</script>