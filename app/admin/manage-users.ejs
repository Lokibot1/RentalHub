<link rel="stylesheet" href="/css/admin.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<link rel="web icon" type="png" href="images/webicon.png">
<!--Navigation Bar-->
<%- include('../partials/admin/navigation-bar.ejs'); %>

<!--Body-->
<div class="main">
    <!-- Side Bar -->
    <%- include('../partials/admin/sidebar-links.ejs'); %>

    <!-- Logout Confirmation Modal -->
    <div id="logout-modal" class="logout-modal">
        <div class="logout-content">
            <p>Are you sure you want to log out?</p>
            <div class="logout-button-group">
                <button id="confirm-logout" class="yes-btn">Yes</button>
                <button id="cancel-logout" class="no-btn">No</button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="content">
        <div class="header">
            <h1>User Management</h1>
        </div>

        <!--Tab Headings-->
        <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'UserList')">
                User List
            </button>
            <button class="tablinks" onclick="openTab(event, 'ReportedAccounts')">
                Reported Accounts
            </button>
            <button class="tablinks" onclick="openTab(event, 'BannedAccounts')">
                Restricted Accounts
            </button>
        </div>

        <!--Tab Content-->

        <!--User List-->
        <div id="UserList" class="tab-content" style="display: block;">
            <div class="user-table">
                <div class="user-search-bar">
                    <input type="text" placeholder="Looking for...">
                    <button><img src="/images/search.png"/></button>
                </div>
                <table>
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody class="user-list-container"></tbody>
                </table>
            </div>
        </div>

        <!--Reported Accounts-->
        <div id="ReportedAccounts" class="tab-content" style="display: none;">
            <div class="reported-accounts-table">
                <div class="reported-accounts-search-bar">
                    <input type="text" placeholder="Looking for...">
                    <button><img src="/images/search.png"/></button>
                </div>
                <table>
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody class="report-accounts-container"></tbody>
                </table>
            </div>
        </div>

        <!--Complaints Modal-->
        <div id="overlay" class="overlay"></div>
        <div class="complaints-modal" style="display: none;">
            <div class="modal-header">
                <div class="modal-back-button" onclick="closeModal()">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                         stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 12H5"></path>
                        <path d="M12 19l-7-7 7-7"></path>
                    </svg>
                </div>
                <div class="title">All Complaints</div>
                <div class="total">Total #</div>
            </div>
            <!-- Scrollable outer body -->
            <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                <div class="report-content"></div>
            </div>
        </div>

        <!--Banned Accounts-->
        <div id="BannedAccounts" class="tab-content" style="display: none;">
            <div class="banned-accounts-table">
                <div class="banned-accounts-search-bar">
                    <input type="text" placeholder="Looking for...">
                    <button><img src="/images/search.png"/></button>
                </div>
                <table>
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody id="banned-accounts-container">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!--Confirmation Modal-->
    <div id="overlay" class="overlay"></div>
    <div id="restrictModal" class="restrict-confirm-modal">
        <div class="modal-content">
            <h3>Are you sure you want to <span>restrict</span> this user?</h3>
            <div class="modal-buttons">
                <button class="restrict-confirm" id="confirmRestrict">Confirm</button>
                <button class="restrict-cancel" id="cancelRestrict">Cancel</button>
            </div>
        </div>
    </div>
    <div id="restrictedToast" class="toast">User Successfully Restricted!</div>

    <div id="restoreModal" class="modal">
        <div class="modal-content">
            <h3>Are you sure you want to <span>restore</span> this Account?</h3>
            <div class="modal-buttons">
                <button class="btn-yes" id="confirmRestore">Confirm</button>
                <button class="btn-no" id="cancelRestore">Cancel</button>
            </div>
        </div>
    </div>
    <div id="restoreToast" class="toast">User Successfully Restored!</div>
</div>

<script src="/js/admin.js"></script>
<script>
    //close modal
    function closeModal() {
        const modal = document.querySelector('.complaints-modal');
        const overlay = document.getElementById("overlay");
        modal.style.display = "none";
        overlay.style.display = "none";
    }

    document.addEventListener("DOMContentLoaded", async function () {
        const userSearchInput = document.querySelector(".user-search-bar input");
        const userSearchButton = document.querySelector(".user-search-bar button");
        const userListTab = document.getElementById("UserList");
        const userTableBody = userListTab.querySelector("table tbody");

        // Create a container for the black box area (search results)
        let searchResultsBox = document.createElement("div");
        searchResultsBox.className = "search-results-box";

        // Get the header element to position the box
        const headerElement = document.querySelector(".header");

        // Insert the search results box after the header
        headerElement.parentNode.insertBefore(searchResultsBox, headerElement.nextSibling);

        // Create the search message element inside the box
        let searchMessage = document.createElement("div");
        searchMessage.className = "search-results-message";
        searchResultsBox.appendChild(searchMessage);

        async function fetchUsers(searchQuery = "") {
            try {
                searchMessage.innerHTML = searchQuery ? `<p>Searching for results...</p>` : "";
                userTableBody.innerHTML = "<tr><td colspan='2'>Searching for users...</td></tr>";

                const response = await fetch(`/api/admin/manage-users/search?keyword=${encodeURIComponent(searchQuery)}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                userTableBody.innerHTML = "";

                if (data.success && data.data.length > 0) {
                    displayUsers(data.data);

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";

                    searchMessage.innerHTML = searchQuery
                        ? `<p>Showing ${data.data.length} result${data.data.length !== 1 ? 's' : ''} for "<strong>${searchQuery}</strong>"</p>`
                        : "";

                    // Clear Search Button
                    if (searchQuery) {
                        let clearButton = document.createElement("button");
                        clearButton.className = "clear-search";
                        clearButton.innerText = "Clear Search";
                        clearButton.addEventListener("click", function () {
                            userSearchInput.value = "";
                            fetchUsers("");
                        });

                        searchMessage.appendChild(clearButton);
                    }
                } else {
                    userTableBody.innerHTML = `<tr><td colspan='2'>No users found.</td></tr>`;

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";
                    searchMessage.innerHTML = searchQuery ? `<p>No results found for "<strong>${searchQuery}</strong>"</p>` : "";
                }
            } catch (error) {
                console.error("Error fetching users:", error);
                userTableBody.innerHTML = "<tr><td colspan='2'>Error loading users.</td></tr>";
            }
        }

        function displayUsers(users) {
            userTableBody.innerHTML = "";

            users.forEach(user => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.fullname}</td>
                    <td>
                        <a href="#" onclick="viewUserDetail(${user.id})">
                            <i class="fa-solid fa-eye"></i>
                        </a>
                    </td>
                `;
                userTableBody.appendChild(row);
            });
        }

        let debounceTimer;
        userSearchInput.addEventListener("input", function () {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                fetchUsers(this.value.trim());
            }, 300);
        });

        userSearchInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                fetchUsers(this.value.trim());
            }
        });

        userSearchButton.addEventListener("click", function () {
            fetchUsers(userSearchInput.value.trim());
        });


        // Workaround
        function triggerFetchReportedAccounts() {
            clearTimeout(debounceReportedAccountsTimer);
            debounceReportedAccountsTimer = setTimeout(() => {
                fetchReportedAccounts(reportedAccountsSearchInput.value.trim());
            }, 300);
        }
        // Trigger on page load
        window.addEventListener("DOMContentLoaded", triggerFetchReportedAccounts);



        // Reported Accounts
        const reportedAccountsSearchInput = document.querySelector(".reported-accounts-search-bar input");
        const reportedAccountsSearchButton = document.querySelector(".reported-accounts-search-bar button");
        const reportedAccountsTab = document.getElementById("ReportedAccounts");
        const reportedAccountsTableBody = reportedAccountsTab.querySelector("table tbody");

        async function fetchReportedAccounts(searchQuery = "") {
            try {
                searchMessage.innerHTML = searchQuery ? `<p>Searching for results...</p>` : "";
                reportedAccountsTableBody.innerHTML = "<tr><td colspan='2'>Searching for users...</td></tr>";

                const response = await fetch(`/api/admin/manage-users/reports/all?keyword=${encodeURIComponent(searchQuery)}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                reportedAccountsTableBody.innerHTML = "";

                if (data.success && data.data.length > 0) {
                    displayReportedAccounts(data.data);

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";

                    searchMessage.innerHTML = searchQuery
                        ? `<p>Showing ${data.data.length} result${data.data.length !== 1 ? 's' : ''} for "<strong>${searchQuery}</strong>"</p>`
                        : "";

                    // Clear Search Button
                    if (searchQuery) {
                        let clearButton = document.createElement("button");
                        clearButton.className = "clear-search";
                        clearButton.innerText = "Clear Search";
                        clearButton.addEventListener("click", function () {
                            reportedAccountsSearchInput.value = "";
                            fetchReportedAccounts("");
                        });

                        searchMessage.appendChild(clearButton);
                    }
                } else {
                    reportedAccountsTableBody.innerHTML = `<tr><td colspan='2'>No users found.</td></tr>`;

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";
                    searchMessage.innerHTML = searchQuery ? `<p>No results found for "<strong>${searchQuery}</strong>"</p>` : "";
                }
            } catch (error) {
                console.error("Error fetching reported accounts:", error);
                reportedAccountsTableBody.innerHTML = "<tr><td colspan='2'>Error loading reported accounts.</td></tr>";
            }
        }

        function displayReportedAccounts(reportedAccounts) {
            reportedAccountsTableBody.innerHTML = "";

            reportedAccounts.forEach(account => {
                console.log('Account:', account);
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="report-accounts-fullname">${account.fullname}</td>
                    <td>
                        <a href="#" class="view-reports" data-reporter-id="${account.reported_user_id}">
                            <i class="fa-solid fa-eye"></i>
                        </a>
                        <a href="#" id="ban-btn" data-userid="${account.reported_user_id}")">
                            <i class="fa-solid fa-ban"></i>
                        </a>
                    </td>
                `;
                reportedAccountsTableBody.appendChild(row);

                console.log('Reported Accounts:', reportedAccountsTableBody);
            });

            // Add event listeners to the eye icons after they're created
            document.querySelectorAll('.view-reports').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const reporterId = this.getAttribute('data-reporter-id');
                    viewUserReports(reporterId);
                });
            });
        }


        // Show complaints modal and inject data
        async function viewUserReports(reporter_id) {
            const modal = document.querySelector('.complaints-modal');
            const modalContent = document.querySelector('.report-content');
            const total = document.querySelector('.total');
            const modalBackButton = document.querySelector('.modal-back-button');
            const overlay = document.getElementById("overlay");
            const title = document.querySelector('.title');

            try {
                const res = await fetch(`/api/admin/manage-users/reports/${reporter_id}`);
                const response = await res.json();

                // Check if response is successful and has data
                if (!response.success || !response.data) {
                    throw new Error("Invalid response format");
                }

                // Access the nested data structure
                const {total_reports, reports} = response.data;

                // Clear previous complaints
                modalContent.innerHTML = "";

                if (reports && reports.length > 0) {
                    reports.forEach(report => {
                        const complaintItem = document.createElement("div");
                        complaintItem.classList.add("complaint-item");

                        // Format the date to be more readable
                        let formattedDate = "N/A";
                        if (report.report_created) {
                            const date = new Date(report.report_created);
                            formattedDate = date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            });
                        }

                        // // Clean and format the reasons as bullet points
                        // let cleanedReasons = '';
                        // if (report.reasons) {
                        //     // Remove brackets, quotes, and backslashes
                        //     const cleanText = report.reasons.replace(/[\[\]"\\]/g, '');

                        //     // Split by commas or other separators
                        //     const reasons = cleanText.split(',').map(reason => reason.trim());

                        //     // Create bullet points
                        //     cleanedReasons = reasons.map(reason =>
                        //         `<li>${reason}</li>`
                        //     ).join('');
                        // }

                        // Clean and format the reasons as bullet points
                        let cleanedReasons = '';
                        console.log("Raw reasons:", report.reasons); // for debugging

                        try {
                            // Parse if it's a string, otherwise use as-is
                            const parsedReasons = typeof report.reasons === 'string'
                                ? JSON.parse(report.reasons)
                                : report.reasons;

                            if (Array.isArray(parsedReasons)) {
                                cleanedReasons = parsedReasons
                                    .map(reason => `<li>${reason}</li>`)
                                    .join('');
                            }
                        } catch (e) {
                            console.warn("Failed to parse report reasons:", e);
                            cleanedReasons = '<li>Unable to display reasons</li>';
                        }

                        complaintItem.innerHTML = `
                            <div class="complaint-header">
                                <div class="complaint-left">
                                    <div class="label">Item Name: <span class="detail">${report.item_name}</span></div>
                                    <div class="label">Reported By: <span class="detail">${report.reporter_name}</span></div>
                                </div>
                                <div class="complaint-right">
                                    <div class="date-label">Date Submitted: <span class="detail date">${formattedDate}</span></div>
                                </div>
                            </div>
                            <div class="complaint-body">
                                <div class="label">Reasons:</div>
                                <ul class="reasons-list">
                                    ${cleanedReasons}
                                </ul>
                                <div class="label">Description:</div>
                                <div class="description">${report.description || 'No description provided'}</div>
                            </div>
                        `

                        modalContent.appendChild(complaintItem);
                    });

                    total.textContent = `Total Reports: ${total_reports}`;
                } else {
                    modalContent.innerHTML = "<p>No complaints found.</p>";
                    total.textContent = "Total 0";
                }

                // Show modal
                modal.style.display = "block";
                overlay.style.display = "block";

            } catch (err) {
                console.error("Error fetching user reports:", err);
                modalContent.innerHTML = "<p>Error loading complaints.</p>";
                total.textContent = "Total 0";
                modal.style.display = "block"; // Still show the modal with error message
            }
        }


        let debounceReportedAccountsTimer;
        reportedAccountsSearchInput.addEventListener("input", function () {
            clearTimeout(debounceReportedAccountsTimer);
            debounceReportedAccountsTimer = setTimeout(() => {
                fetchReportedAccounts(this.value.trim());
            }, 300);
        });

        reportedAccountsSearchInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                fetchReportedAccounts(this.value.trim());
            }
        });

        reportedAccountsSearchButton.addEventListener("click", function () {
            fetchReportedAccounts(reportedAccountsSearchInput.value.trim());
        });



        // Banned Accounts
        const bannedAccountsContainer = document.getElementById("banned-accounts-container");
        const bannedAccountsSearchInput = document.querySelector(".banned-accounts-search-bar input");
        const bannedAccountsSearchButton = document.querySelector(".banned-accounts-search-bar button");
        const bannedAccountsTab = document.getElementById("ReportedAccounts");
        const bannedAccountsTableBody = bannedAccountsTab.querySelector("table tbody");

        async function fetchBannedAccounts(searchQuery = "") {
            try {
                searchMessage.innerHTML = searchQuery ? `<p>Searching for results...</p>` : "";
                bannedAccountsTableBody.innerHTML = "<tr><td colspan='2'>Searching for users...</td></tr>";

                const response = await fetch(`/api/admin/manage-users/banned-users/all?keyword=${encodeURIComponent(searchQuery)}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                bannedAccountsTableBody.innerHTML = "";

                if (data.success && data.data.length > 0) {
                    displayBannedAccounts(data.data);

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";

                    searchMessage.innerHTML = searchQuery
                        ? `<p>Showing ${data.data.length} result${data.data.length !== 1 ? 's' : ''} for "<strong>${searchQuery}</strong>"</p>`
                        : "";

                    // Clear Search Button
                    if (searchQuery) {
                        let clearButton = document.createElement("button");
                        clearButton.className = "clear-search";
                        clearButton.innerText = "Clear Search";
                        clearButton.addEventListener("click", function () {
                            bannedAccountsSearchInput.value = "";
                            fetchBannedAccounts("");
                        });

                        searchMessage.appendChild(clearButton);
                    }
                } else {
                    bannedAccountsTableBody.innerHTML = `<tr><td colspan='2'>No users found.</td></tr>`;

                    // Update search results box visibility
                    searchResultsBox.style.display = searchQuery ? "flex" : "none";
                    searchMessage.innerHTML = searchQuery ? `<p>No results found for "<strong>${searchQuery}</strong>"</p>` : "";
                }
            } catch (error) {
                console.error("Error fetching banned accounts:", error);
                bannedAccountsTableBody.innerHTML = "<tr><td colspan='2'>Error loading banned accounts.</td></tr>";
            }
        }

        function displayBannedAccounts(bannedAccounts) {
            bannedAccountsContainer.innerHTML = "";

            bannedAccounts.forEach(account => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="banned-accounts-fullname">${account.fullname}</td>
                    <td>
                        <a href="#" onclick="viewUserBannedInfo(${account.user_id})">
                            <i class="fa-solid fa-eye"></i>
                        </a>
                        <a href="#"  class="restore-btn" data-userid="${account.user_id}">
                             <i class="fa-solid fa-repeat"></i>
                         </a>
                    </td>
                `;
                bannedAccountsContainer.appendChild(row);

                console.log('bannedAccounts:', bannedAccountsContainer);
            });

            // Add event listeners to the eye icons after they're created
            document.querySelectorAll('.view-reports').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const reporterId = this.getAttribute('data-reporter-id');
                    viewUserReports(reporterId);
                });
            });
        }

        // Show complaints modal and inject data
        // async function viewUserBanned(reporter_id) {
        //     const modal = document.querySelector('.complaints-modal');
        //     const modalContent = document.querySelector('.report-content');
        //     const total = document.querySelector('.total');
        //     const modalBackButton = document.querySelector('.modal-back-button');
        //     const overlay = document.getElementById("overlay");
        //     const title = document.querySelector('.title');
        //
        //     try {
        //         const res = await fetch(`/api/admin/manage-users/reports/${reporter_id}`);
        //         const response = await res.json();
        //
        //         // Check if response is successful and has data
        //         if (!response.success || !response.data) {
        //             throw new Error("Invalid response format");
        //         }
        //
        //         // Access the nested data structure
        //         const {total_reports, reports} = response.data;
        //
        //         // Clear previous complaints
        //         modalContent.innerHTML = "";
        //
        //         if (reports && reports.length > 0) {
        //             reports.forEach(report => {
        //                 const complaintItem = document.createElement("div");
        //                 complaintItem.classList.add("complaint-item");
        //
        //                 // Format the date to be more readable
        //                 let formattedDate = "N/A";
        //                 if (report.report_created) {
        //                     const date = new Date(report.report_created);
        //                     formattedDate = date.toLocaleDateString('en-US', {
        //                         year: 'numeric',
        //                         month: 'long',
        //                         day: 'numeric'
        //                     });
        //                 }
        //
        //                 // Clean and format the reasons as bullet points
        //                 let cleanedReasons = '';
        //                 if (report.reasons) {
        //                     // Remove brackets, quotes, and backslashes
        //                     const cleanText = report.reasons.replace(/[\[\]"\\]/g, '');
        //
        //                     // Split by commas or other separators
        //                     const reasons = cleanText.split(',').map(reason => reason.trim());
        //
        //                     // Create bullet points
        //                     cleanedReasons = reasons.map(reason =>
        //                         `<li>${reason}</li>`
        //                     ).join('');
        //                 }
        //
        //                 complaintItem.innerHTML = `
        //                     <div class="complaint-header">
        //                         <div class="complaint-left">
        //                             <div class="label">Item Name: <span class="detail">${report.item_name}</span></div>
        //                             <div class="label">Reported By: <span class="detail">${report.reporter_name}</span></div>
        //                         </div>
        //                         <div class="complaint-right">
        //                             <div class="date-label">Date Submitted: <span class="detail date">${formattedDate}</span></div>
        //                         </div>
        //                     </div>
        //                     <div class="complaint-body">
        //                         <div class="label">Reasons:</div>
        //                         <ul class="reasons-list">
        //                             ${cleanedReasons}
        //                         </ul>
        //                         <div class="label">Description:</div>
        //                         <div class="description">${report.description || 'No description provided'}</div>
        //                     </div>
        //                 `
        //
        //                 modalContent.appendChild(complaintItem);
        //             });
        //
        //             total.textContent = `Total Reports: ${total_reports}`;
        //         } else {
        //             modalContent.innerHTML = "<p>No complaints found.</p>";
        //             total.textContent = "Total 0";
        //         }
        //
        //         // Show modal
        //         modal.style.display = "block";
        //         overlay.style.display = "block";
        //
        //     } catch (err) {
        //         console.error("Error fetching user reports:", err);
        //         modalContent.innerHTML = "<p>Error loading complaints.</p>";
        //         total.textContent = "Total 0";
        //         modal.style.display = "block"; // Still show the modal with error message
        //     }
        // }


        let debounceBannedAccountsTimer;
        bannedAccountsSearchInput.addEventListener("input", function () {
            clearTimeout(debounceBannedAccountsTimer);
            debounceBannedAccountsTimer = setTimeout(() => {
                fetchBannedAccounts(this.value.trim());
            }, 300);
        });

        bannedAccountsSearchInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                fetchBannedAccounts(this.value.trim());
            }
        });

        bannedAccountsSearchButton.addEventListener("click", function () {
            fetchBannedAccounts(bannedAccountsSearchInput.value.trim());
        });

        // Initialize users list
        await fetchUsers();

        // Initialize reported accounts list
        await fetchReportedAccounts();

        // Initialize reported accounts list
        await fetchBannedAccounts();


        // TODO: @Loki, move this to a separate css rule
        // Add CSS for the search results box and message
        const style = document.createElement('style');
        style.textContent = `
        .search-results-box {
            display: none;
            align-items: center;
            justify-content: flex-end;
            padding: 10px 20px;
            margin-top: 10px;
            margin-bottom: 10px;
            background-color: none;
            border-radius: 4px;
        }

        .search-results-message {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .search-results-message p {
            margin: 0;
            font-size: 14px;
        }

        .clear-search {
            background-color: none;
            color: #800020;
            border: none;
            border-radius: 5px;
            padding: 8px 10px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s;
        }

        .clear-search:hover {
            background-color: #800020;
            color: #fff;
            transition: background-color 0.2s;
        }

        /* Media query for desktop view - position on the right side */
        @media (min-width: 768px) {
            .search-results-box {
                position: absolute;
                top: 170px; /* Adjust this value to align with your tabs */
                right: 20px;
                width: 350px;
                z-index: 1;
            }
        }
    `;
        document.head.appendChild(style);
    });


    // View user details
    const viewUserDetail = async (userId) => {
        console.log('Users:', userId);

        const response = await fetch(`http://localhost:8000/api/admin/manage-users/get-user-by-id/${userId}`);
        const {data: user, success} = await response.json();

        if (success) {

            document.getElementById('UserList').style.display = 'none';

            let userInfoDetails = document.getElementById('userInfoDetails');
            if (!userInfoDetails) {
                userInfoDetails = document.createElement('div');
                userInfoDetails.id = 'userInfoDetails';
                document.querySelector('.tab-content').parentNode.appendChild(userInfoDetails);
            }

            // Populate the user details
            userInfoDetails.innerHTML = `
                    <div class="user-detail-container" style="  overflow: hidden;
                                                        height: 58vh;
                                                        background-color: #ffff;
                                                        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
                                                        padding: 20px;
                                                        padding-top: 0;
                                                        min-height: 300px;
                                                        border-radius: 0px 10px 10px 10px;">
                        <div class="back-button">
                            <a href="#" onclick="returnToUserList()">
                                <i class="fa-solid fa-arrow-left"></i>
                            </a>

                        </div>

                        <div class="user-detail-table">
                            <table style=" width: 100%;
                                    border-spacing: 0px 20px;
                                    text-align: left;
                                    font-size: 1rem;
                                    font-weight: normal;">
                                <tr>
                                    <td>User ID</td>
                                    <td>${user.id}</td>
                                </tr>
                                <tr>
                                    <td>Name</td>
                                    <td style="padding: 10px;">${user.fullname}</td>
                                </tr>
                                <tr>
                                    <td>Email</td>
                                    <td style="padding: 10px;">${user.email}</td>
                                </tr>
                                <tr>
                                    <td>Contact Number</td>
                                    <td style="padding: 10px;">${user.contact_number}</td>
                                </tr>
                                <tr>
                                    <td>Account Status</td>
                                    <td style="padding: 10px;">${user.account_status}</td>
                                </tr>
                                <tr>
                                    <td>Total Listings</td>
                                    <td style="padding: 10px;">${user.total_listing}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                `;

            // Display the user details
            userInfoDetails.style.display = 'block';
        } else {
            // Handle error
            alert('Error: Could not retrieve user details.');
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        let selectedUserId = null;
        let selectedUserElement = null;

        // Confirm: perform ban
        document.getElementById("confirmRestrict").addEventListener("click", async () => {
            if (!selectedUserId) return;

            try {
                const response = await fetch(`/api/admin/manage-users/ban/${selectedUserId}`, {
                    method: 'PATCH',
                });

                const {message} = await response.json();
                console.log('Message:', message);

                document.getElementById("restrictModal").style.display = "none";

                const overlay = document.getElementById("overlay");
                if (overlay) {
                    overlay.style.cssText = `
                    display: block !important;
                    position: fixed !important;
                    top: 0 !important;
                    left: 0 !important;
                    width: 100% !important;
                    height: 100% !important;
                    background-color: rgba(0, 0, 0, 0.5) !important;
                    z-index: 9998 !important;
                `;
                }

                // Get toast and make it visible
                const restrictedToast = document.getElementById("restrictedToast");
                console.log("Toast element found:", restrictedToast);

                if (restrictedToast) {
                    restrictedToast.style.cssText = `
                    display: block !important; 
                    position: fixed !important; 
                    top: 50% !important;
                    left: 50% !important;
                    transform: translate(-50%, -50%) !important;
                    z-index: 9999 !important;
                    background-color: #f5f5f5;
                    color: #1b2e3d;
                    padding: 20px;
                    border-radius: 20px;
                    opacity: 1 !important;
                    visibility: visible !important;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    text-align: center;
                    transition: opacity 0.5s ease-in-out, bottom 0.5s ease-in-out;
                `;

                    console.log("Toast should be visible now with styles:", restrictedToast.style.cssText);
                }

                if (selectedUserElement) {
                    console.log("Removing user element:", selectedUserElement);

                    selectedUserElement.style.transition = "opacity 0.5s ease";
                    selectedUserElement.style.opacity = "0";

                    setTimeout(() => {
                        selectedUserElement.remove();
                        console.log("User element removed from DOM");

                        updateUserCounters();
                    }, 500);
                }

                setTimeout(() => {
                    if (restrictedToast) restrictedToast.style.display = "none";
                    if (overlay) overlay.style.display = "none";
                    location.reload();
                }, 3000);

            } catch (err) {
                console.error("Error banning user:", err);
            }
        });

        document.addEventListener("click", function (e) {
            const banBtn = e.target.closest("a[data-userid]");
            if (banBtn && banBtn.querySelector(".fa-ban")) {
                e.preventDefault();

                selectedUserId = banBtn.getAttribute("data-userid");

                // Find the correct user element - look for different possible parent structures
                selectedUserElement = document.getElementById(`user-${selectedUserId}`);

                // If the user element wasn't found by ID, try to find by traversing the DOM from the clicked button
                if (!selectedUserElement) {
                    // Try to find the closest user container - adapt this selector to match your HTML structure
                    selectedUserElement = banBtn.closest('.user-item, .user-container, .user-row, tr');
                    console.log("Found user element by traversing up:", selectedUserElement);
                }

                document.getElementById("restrictModal").style.display = "block";
                document.getElementById("overlay").style.display = "block";
            }
        });

        // Cancel: just hide modal
        document.getElementById("cancelRestrict").addEventListener("click", () => {
            document.getElementById("restrictModal").style.display = "none";
            document.getElementById("overlay").style.display = "none";
        });


        // Confirm: perform restore
        document.getElementById("confirmRestore").addEventListener("click", async () => {
            if (!selectedUserId) return;

            try {
                const response = await fetch(`/api/admin/manage-users/restore/${selectedUserId}`, {
                    method: 'PATCH',
                });

                const {message} = await response.json();
                console.log('Message:', message);

                document.getElementById("restoreModal").style.display = "none";

                const overlay = document.getElementById("overlay");
                if (overlay) {
                    overlay.style.cssText = `
                    display: block !important;
                    position: fixed !important;
                    top: 0 !important;
                    left: 0 !important;
                    width: 100% !important;
                    height: 100% !important;
                    background-color: rgba(0, 0, 0, 0.5) !important;
                    z-index: 9998 !important;
                `;
                }

                // Get toast and make it visible
                const restoreToast = document.getElementById("restoreToast");
                console.log("Toast element found:", restoreToast);

                if (restoreToast) {
                    restoreToast.style.cssText = `
                    display: block !important; 
                    position: fixed !important; 
                    top: 50% !important;
                    left: 50% !important;
                    transform: translate(-50%, -50%) !important;
                    z-index: 9999 !important;
                    background-color: #f5f5f5;
                    color: #1b2e3d;
                    padding: 20px;
                    border-radius: 20px;
                    opacity: 1 !important;
                    visibility: visible !important;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    text-align: center;
                    transition: opacity 0.5s ease-in-out, bottom 0.5s ease-in-out;
                `;

                    console.log("Toast should be visible now with styles:", restoreToast.style.cssText);
                }

                if (selectedUserElement) {
                    console.log("Removing user element:", selectedUserElement);

                    selectedUserElement.style.transition = "opacity 0.5s ease";
                    selectedUserElement.style.opacity = "0";

                    setTimeout(() => {
                        selectedUserElement.remove();
                        console.log("User element removed from DOM");

                        updateUserCounters();
                    }, 500);
                }

                setTimeout(() => {
                    if (restoreToast) restoreToast.style.display = "none";
                    if (overlay) overlay.style.display = "none";
                    location.reload();
                }, 3000);

            } catch (err) {
                console.error("Error setting user to active:", err);
            }
        });

        document.addEventListener("click", function (e) {
            const restoreButton = e.target.closest("a[data-userid]");
            if (restoreButton && restoreButton.querySelector(".fa-repeat")) {
                e.preventDefault();

                selectedUserId = restoreButton.getAttribute("data-userid");

                // Find the correct user element - look for different possible parent structures
                selectedUserElement = document.getElementById(`user-${selectedUserId}`);

                // If the user element wasn't found by ID, try to find by traversing the DOM from the clicked button
                if (!selectedUserElement) {
                    // Try to find the closest user container - adapt this selector to match your HTML structure
                    selectedUserElement = restoreButton.closest('.user-item, .user-container, .user-row, tr');
                    console.log("Found user element by traversing up:", selectedUserElement);
                }

                document.getElementById("restoreModal").style.display = "flex";
                document.getElementById("overlay").style.display = "block";
            }
        });

        // Cancel: just hide modal
        document.getElementById("cancelRestore").addEventListener("click", () => {
            document.getElementById("restoreModal").style.display = "none";
            document.getElementById("overlay").style.display = "none";
        });

        // Helper function to update any user counters after removal
        function updateUserCounters() {
            // Update total user count if such element exists
            const userCountElement = document.querySelector('.user-count, .total-users');
            if (userCountElement) {
                const currentCount = parseInt(userCountElement.textContent, 10);
                if (!isNaN(currentCount)) {
                    userCountElement.textContent = currentCount - 1;
                }
            }

            // Check if users list is empty and show a message if needed
            const usersList = document.querySelector('.users-list, .users-table tbody');
            if (usersList && usersList.children.length === 0) {
                const emptyMessage = document.createElement('div');
                emptyMessage.className = 'empty-state';
                emptyMessage.textContent = 'No users found.';
                usersList.parentNode.appendChild(emptyMessage);
            }
        }
    });

    const viewUserBannedInfo = async (userId) => {
    console.log('Ban User:', userId);
    
    try {
        const response = await fetch(`/api/admin/manage-users/ban/view-user/${userId}`);
        const {data: user, success} = await response.json();
        
        console.log('Response data:', user);
        
        if (success) {
            // Hide the banned accounts list - use the correct ID
            document.getElementById('BannedAccounts').style.display = 'none';
            
            // Create or get the banned user details container
            let bannedUserInfoDetails = document.getElementById('bannedUserInfoDetails');
            if (!bannedUserInfoDetails) {
                bannedUserInfoDetails = document.createElement('div');
                bannedUserInfoDetails.id = 'bannedUserInfoDetails';
                // Append to the same parent as BannedAccounts
                document.getElementById('BannedAccounts').parentNode.appendChild(bannedUserInfoDetails);
            }
            
            // Populate the banned user details
            bannedUserInfoDetails.innerHTML = `
                <div class="user-detail-container" style="overflow: hidden;
                                                height: 58vh;
                                                background-color: #ffff;
                                                box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
                                                padding: 20px;
                                                padding-top: 0;
                                                min-height: 300px;
                                                border-radius: 0px 10px 10px 10px;">
                    <div class="back-button">
                        <a href="#" onclick="returnToBannedUserList()">
                            <i class="fa-solid fa-arrow-left"></i>
                        </a>
                    </div>
                    
                    <div class="user-detail-table">
                        <table style="width: 100%;
                                border-spacing: 0px 20px;
                                text-align: left;
                                font-size: 1rem;
                                font-weight: normal;">
                            <tr>
                                <td>User ID</td>
                                <td>${user.user_id}</td>
                            </tr>
                            <tr>
                                <td>Name</td>
                                <td style="padding: 10px;">${user.fullname}</td>
                            </tr>
                            <tr>
                                <td>Email</td>
                                <td style="padding: 10px;">${user.email}</td>
                            </tr>
                            <tr>
                                <td>Account Status</td>
                                <td style="padding: 10px;">${user.status}</td>
                            </tr>
                            <tr>
                                <td>Total Listings</td>
                                <td style="padding: 10px;">${user.total_items || 'No Items Posted'}</td>
                            </tr>
                            <tr>
                                <td>Average Rating</td>
                                <td style="padding: 10px;">${user.average_rating || 'Unrated'}</td>
                            </tr>
                            <tr>
                                <td>Banned Date</td>
                                <td style="padding: 10px;">${user.banned_date}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            `;
            
            // Display the banned user details
            bannedUserInfoDetails.style.display = 'block';
        } else {
            // Handle error
            alert('Error: Could not retrieve banned user details.');
        }
    } catch (error) {
        console.error("Error fetching banned user details:", error);
        alert('Error: Could not retrieve banned user details.');
    }
};

// Function to return to the banned user list
const returnToBannedUserList = () => {
    // Hide the banned user details
    const bannedUserInfoDetails = document.getElementById('bannedUserInfoDetails');
    if (bannedUserInfoDetails) {
        bannedUserInfoDetails.style.display = 'none';
    }
    
    // Show the banned accounts list - use the correct ID
    document.getElementById('BannedAccounts').style.display = 'block';
};

    const restoreUser = async (userId) => {
        // TODO: Get the userid and process the request
    }
</script>
