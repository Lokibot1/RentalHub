<link rel="stylesheet" href="/css/archives.css">
<link rel="web icon" type="png" href="images/webicon.png">
<!--Navigation Bar-->
<%- include('../partials/admin/navigation-bar.ejs'); %>

<!--Body-->
<div class="main">
    <!-- Side Bar -->
    <%- include('../partials/admin/sidebar-links.ejs'); %>

    <% function formatDateRange(startDate, endDate) {
        const options = {
            year: 'numeric', month: 'long', day: 'numeric'
        };
        const start = new Date(startDate).toLocaleDateString('en-US', options);
        const end = new
        Date(endDate).toLocaleDateString('en-US', options);
        return `${start} - ${end}`;
    } %>

    <!--Main Content-->
    <div class="content">
        <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'Requests')">
                Requests
            </button>
            <button class="tablinks" onclick="openTab(event, 'On Going')">
                On Going
            </button>
        </div>

        <!--Tab Content-->
        <div id="Requests" class="tab-content" style="display: block">
            <div class="RentalList">
                <%
                    function formatDateRange(startDate, endDate) {
                        const options = {year: 'numeric', month: 'long', day: 'numeric'};

                        const start = new Date(startDate).toLocaleDateString('en-US', options);
                        const end = new Date(endDate).toLocaleDateString('en-US', options);

                        return `${start} - ${end}`;
                    }

                    // This function formats the date to "Month Day, Year"
                    // Example: "April 4, 2025"
                    function formatDate(dateString) {
                        const options = {year: "numeric", month: "long", day: "numeric"};
                        return new Date(dateString).toLocaleDateString("en-US", options);
                    }
                    %>
                <% if (rentRequestItems.length > 0) { %>
                    <% rentRequestItems.forEach(function(item) { %>
                        <div class="rentalItem" data-request-id="<%= item.request_id || item.id %>" style="margin-bottom: 10px;">
                            <div class="rentalInfo">
                                <div class="renterDetails">
                                        <h4 class="renterName">
                                            <%= item.owner_name %>
                                        </h4>
                                        <strong> • </strong>
                                        <h4 class="renterLocation"> <%= item.owners_address %> </h4>
                                </div>
                                    <div class="itemDetails">
                                        <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                        <div class="details">
                                            <p class="itemName">Item Name: <%= item.item_name %></p>
                                            <p class="itemLocation">Item Location: <%= item.item_location %></p>
                                            <p class="Quantity">Quantity: <%= item.item_quantity %></p>
                                            <p class="postedDate">Requested
                                                on: <%= formatDate(item.created_at) %></p>
                                    </div>
                                    </div>
                                    <div class="rentalDurationContainer">
                                <strong class="rentalDuration"><%= formatDateRange(item.start_date, item.end_date) %></strong>
                                <strong>•</strong>
                                <strong class="MOD"><%= item.mode_of_delivery %></strong>
                            </div>
                            </div>
                            <div class="completeAction">
                                <button class="cancel-btn">Cancel</button>
                            </div>
                            </div>
                    <% }); %>
                <% } else { %>
                    <p>No pending requests available.</p>
                <% } %>
            </div>
        </div>
        

        <div class="overlay" id="modal-overlay"></div>
        <!-- Confirmation Modal -->
        <div id="cancel-modal" class="modal">
            <div class="modal-content" style="width: 40%;">
                <h3>Are you sure you want to cancel this request?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="cancel-submit">Confirm</button>
                    <button class="btn-no" id="cancel-confirmss">Cancel</button>
                </div>
            </div>
        </div>

        
        <div id="cancelToast" class="toast">Request Cancelled Successfully!</div>

        <!-- On Going Modal -->
        <div id="On Going" class="tab-content">
            <div class="RentalList">

                <% if (ongoingRentItems.length > 0) { %>
                    <% ongoingRentItems.forEach(function(item) { %>
                        <div class="rentalItem">
                            <div class="rentalInfo">
                                <div class="renterDetails">
                                    <h4 class="renterName">
                                        <%= item.owner_name %>
                                    </h4>
                                    <strong> • </strong>
                                    <h4 class="renterLocation"> <%= item.owners_address %> </h4>
                                </div>
                                    <div class="itemDetails">
                                        <img src="/uploads/<%= item.item_image %>" alt="" class="itemImage"/>
                                        <div class="details">
                                            <p class="itemName">Item Name: <%= item.item_name %></p>
                                            <p class="itemLocation">Item Location: <%= item.item_location %></p>
                                            <p class="Quantity">Quantity: <%= item.item_quantity %></p>
                                            <p class="postedDate">Requested
                                                on: <%= formatDate(item.created_at) %></p>
                                    </div>
                                </div>
                                <div class="rentalDurationContainer">
                                    <strong class="rentalDuration"><%= formatDateRange(item.start_date, item.end_date) %></strong>
                                    <strong>•</strong>
                                    <strong class="MOD"><%= item.mode_of_delivery %></strong>
                                </div>
                            </div>
                            <div class="completeAction">
                                <button data-id="report-btn"
                                        class="report-btn"
                                        data-selected-user-id="<%= item.item_owner_id %>"
                                        data-selected-item-id="<%= item.item_id %>"
                                        onclick="setItemId(this)"
                                >
                                    File a Report
                                </button>
                                <button class="review-btn" data-id="review-btn-<%= item.id %>">Done</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No pending requests available.</p>
                <% } %>
            </div>
        </div>

         <!--Report Modal-->
         <div id="modal-overlay" class="overlay"></div>
         <div id="report-modal" class="modal">
             <div class="modal-content" style="text-align: left">
                 <h2>Report Owner</h2>
                 <form id="report-form">
                     <label>Reason:</label>
                     <div>
                         <input type="checkbox" id="damageToItem" name="reason" value="Damage to Item"/>
                         <label for="damageToItem">Damage to Item</label>
                     </div>
                     <div>
                         <input type="checkbox" id="lateReturn" name="reason" value="Late Return of Item"/>
                         <label for="lateReturn">Late Return of Item</label>
                     </div>
                     <div>
                         <input type="checkbox" id="notReturned" name="reason" value="Item Not Returned"/>
                         <label for="notReturned">Item Not Returned</label>
                     </div>
                     <div>
                         <input type="checkbox" id="noShow" name="reason" value="No Show"/>
                         <label for="noShow">No Show</label>
                     </div>
                     <div>
                         <input type="checkbox" id="duplicate" name="reason" value="Duplicate"/>
                         <label for="duplicate">Duplicate</label>
                     </div>
                     <div>
                         <input type="checkbox" id="inappropriate" name="reason" value="Inappropriate"/>
                         <label for="inappropriate">Inappropriate</label>
                     </div>
                     <div>
                         <input type="checkbox" id="fraudulent" name="reason" value="Fraudulent"/>
                         <label for="fraudulent">Fraudulent</label>
                     </div>
                     <br/>
                     <label for="description">Describe What Happened</label>
                     <br/>
                     <textarea id="description" name="description" rows="4" cols="50"></textarea>
                     <br/>
                     <button id="submit-rprt" type="submit">Submit</button>
                     <button id="cancel-rprt" type="button">Cancel</button>
                 </form>
             </div>
         </div>

         <div id="confirm-modal" class="modal">
            <div class="modal-content">
                <h3>Are you sure you want to submit this report?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="confirm-submit">Confirm</button>
                    <button class="btn-no" id="cancel-confirms">Cancel</button>
                </div>
            </div>
        </div>       
 
         <!-- Toast Notification -->
         <div id="report-toast" class="toast">Report Submitted Successfully!</div>
          

        <!-- Modal for Review -->
        <div id="review-modal" class="modal">
            <div class="modal-content" style="text-align: left">
                <h2>Review for Owner</h2>
                <form id="review-form">
                    <label for="rating">Rating:</label>
                    <br/>
                    <div class="stars">
                        <span class="star2" data-value="1">★</span>
                        <span class="star2" data-value="2">★</span>
                        <span class="star2" data-value="3">★</span>
                        <span class="star2" data-value="4">★</span>
                        <span class="star2" data-value="5">★</span>
                    </div>
                    <br/>
                    <label for="description">Describe Your Experience</label>
                    <br/>
                    <textarea id="review-description" name="review_description" rows="4" cols="50"></textarea>
                    <br/>
                    <button id="submit-rev" type="submit">Submit</button>
                    <button id="cancel-rev" type="button">Cancel</button>
                </form>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div id="confirm-modal1" class="modal">
            <div class="modal-content">
                <h3>Are you sure you want to submit this review?</h3>
                <div class="modal-buttons">
                    <button class="btn-yes" id="confirm-review">Confirm</button>
                    <button class="btn-no" id="cancel-review">Cancel</button>
                </div>
            </div>
        </div>

        <!-- Toast Notification -->
        <div id="toast" class="toast">Review Submitted Successfully!</div>

        <!--Error Modal when accepting a Filing A Report Once-->
        <div id="errorModal" class="report-error-modal">
            <div class="accept-error-content">
                <p class="note0">Report Submission Failed: <br>You already filed a report regarding this transaction.</p>
                <button onclick="closeErrorModal()" class="close-button">I Understand</button>
            </div>
        </div>


        <div id="overlay" class="overlay"></div>
        <div id="success-container1" class="success-container1">
            <div id="success-message1" class="success-message1">
                <p>Request accepted successfully!</p>
            </div>
        </div>

        <!-- Logout Confirmation Modal -->
        <!-- <div id="logout-modal" class="logout-modal">
          <div class="logout-content">
            <p>Are you sure you want to log out?</p>
            <div class="logout-button-group">
              <button id="confirm-logout" class="yes-btn">Yes</button>
              <button id="cancel-logout" class="no-btn">No</button>
            </div>
          </div>
        </div> -->
    </div>
</div>

<!--JavaScript-->
<script>
    let selectedItemId = 0
    let selectedUserId = 0
    let currentLoggedInUserId = "<%= currentUserId %>"
    let selectedReasons = []
    let description = ""
    // Updated JavaScript for the toast and overlay issue
document.addEventListener("DOMContentLoaded", function () {
    // Get all required elements
    const cancelBtns = document.querySelectorAll(".cancel-btn");
    const cancelModal = document.getElementById("cancel-modal");
    const modalOverlay = document.getElementById("modal-overlay");
    const cancelSubmit = document.getElementById("cancel-submit");
    const cancelConfirm = document.getElementById("cancel-confirmss");
    const cancelToast = document.getElementById("cancelToast");
    
    console.log("Elements loaded:", {
        cancelBtns: cancelBtns.length,
        cancelModal: !!cancelModal,
        modalOverlay: !!modalOverlay,
        cancelToast: !!cancelToast
    });

    let selectedRequestId = null;

    // Show modal when cancel button is clicked
    cancelBtns.forEach(btn => {
        btn.addEventListener("click", function() {
            console.log("Cancel button clicked");
            
            // Get request ID
            const rentalItem = this.closest('.rentalItem');
            selectedRequestId = rentalItem.getAttribute("data-request-id");
            console.log("Selected request ID:", selectedRequestId);
            
            // Show modal and overlay
            showModal();
        });
    });

    // Function to show modal and overlay
    function showModal() {
        console.log("Showing modal and overlay");
        cancelModal.style.display = "flex";
        modalOverlay.style.cssText = "display: block !important; background-color: rgba(0,0,0,0.7) !important;";
    }

    // Function to hide modal but not overlay
    function hideModalOnly() {
        console.log("Hiding modal only");
        cancelModal.style.display = "none";
        // Keep overlay visible
    }

    // Function to hide both modal and overlay
    function hideAll() {
        console.log("Hiding all elements");
        cancelModal.style.display = "none";
        modalOverlay.style.display = "none";
        cancelToast.classList.remove("show"); // Also hide toast
    }

    // Function to show toast with overlay
    function showToast() {
        console.log("Showing toast with overlay");
        // Make sure overlay is visible
        modalOverlay.style.cssText = "display: block !important; background-color: rgba(0,0,0,0.7) !important;";
        // Show toast
        cancelToast.classList.add("show");
    }

    // Close on cancel button (just the modal, keep overlay for toast)
    cancelConfirm.addEventListener("click", function() {
        hideModalOnly();
    });
    
    // Close everything when clicking overlay
    modalOverlay.addEventListener("click", function() {
        // Only close everything if toast isn't showing
        if (!cancelToast.classList.contains("show")) {
            hideAll();
        }
    });
    
    // Handle submission
    cancelSubmit.addEventListener("click", async function() {
        console.log("Submit clicked, selectedRequestId:", selectedRequestId);
        
        if (selectedRequestId) {
            try {
                // Hide just the modal first
                hideModalOnly();
                
                const response = await fetchWithAutoRefresh(`/api/user/my-requests/cancel/${selectedRequestId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                console.log("API response:", result);
                
                if (result.success) {
                    // Show toast with overlay still visible
                    showToast();
                    
                    // Set timeout to reload page after toast is shown
                    setTimeout(() => {
                        console.log("Reloading page");
                        window.location.reload();
                    }, 2000);
                } else {
                    // Hide everything if request failed
                    hideAll();
                }
            } catch (error) {
                console.error("Error:", error);
                hideAll();
            }
        } else {
            console.warn("No request ID selected");
            hideAll();
        }
    });
});

    // LOAD ACTIVE TAB DATA AUTOMATICALLY
    async function loadActiveTab() {
        const activeTab = document.querySelector(".tablinks.active")?.dataset.api || "/api/my-rents"; // Default to "my-rents"
        await fetchRents(activeTab, activeTab === "/api/my-rents" ? "request-container" : "review-container");
    }

    // FETCH RENTS FUNCTION
    async function fetchRents(apiUrl, containerId) {
        try {
            const response = await fetchWithAutoRefresh(apiUrl);
            const data = await response.json();
            const container = document.getElementById(containerId);
            container.innerHTML = "";

            data.forEach((rent) => {
                const rentCard = document.createElement("div");
                rentCard.classList.add("rent-card");
                rentCard.innerHTML = `
              <p class="seller-name">${rent.seller}</p>
              <div class="rent-item">
                <img src="${rent.image || "placeholder.png"}" alt="Product Image" class="product-image">
                <span class="product-name">${rent.product}</span>
              </div>
              <button class="cancel-btn" onclick="cancelRent('${rent.id}', '${containerId}')">Cancel</button>
            `;
                container.appendChild(rentCard);
            });
        } catch (error) {
            console.error(`Error fetching data from ${apiUrl}:`, error);
        }
    }

    // CANCEL RENT FUNCTION SA REVIEWS TAB
    async function cancelRent(rentId, containerId) {
        try {
            const response = await fetchWithAutoRefresh(`/api/cancel-rent/${rentId}`, {
                method: "POST",
                headers: {"Content-Type": "application/json"},
            });
            if (response.ok) {
                alert("Rental canceled successfully.");
                // await fetchRents(containerId === "request-container" ? "/api/my-rents" : "/api/my-reviews", containerId); //eto change api if diff api gagamitin mo
            }
        } catch (error) {
            console.error("Error canceling rent:", error);
        }
    }

    // OPEN TAB FUNCTION
    function openTab(evt, tabName, apiUrl) {
        var i, tabs, buttons;
        tabs = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabs.length; i++) {
            tabs[i].style.display = "none";
        }
        buttons = document.getElementsByClassName("tablinks");
        for (i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove("active");
        }

        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.classList.add("active");
        evt.currentTarget.dataset.api = apiUrl; //STORE API ENDPOINT SA BUTTON
        // fetchRents(apiUrl, tabName === "request-container" ? "request-container" : "review-container");
    }

    // // Review Modal Functionality
    // const reviewBtn = document.getElementById("review-btn");
    // const reviewModal = document.getElementById("review-modal");
    // const confirmModal = document.getElementById("confirm-modal");
    // const submitRev = document.getElementById("submit-rev");
    // const confirmSubmit = document.getElementById("confirm-submit");
    // const cancelConfirm = document.getElementById("cancel-confirm");
    // const cancelRev = document.getElementById("cancel-rev");
    // const toast = document.getElementById("toast");

    // // Show review modal
    // reviewBtn.addEventListener("click", function () {
    //     reviewModal.style.display = "flex";
    // });

    // // Hide review modal
    // cancelRev.addEventListener("click", function () {
    //     reviewModal.style.display = "none";
    // });

    // // Star Rating System
    // const stars = document.querySelectorAll(".star2");
    // let selectedRating = 0;

    // stars.forEach((star) => {
    //     star.addEventListener("click", function () {
    //         selectedRating = parseInt(this.getAttribute("data-value")); // Store the selected rating
    //         updateStars(selectedRating);
    //     });

    //     star.addEventListener("mouseover", function () {
    //         updateStars(parseInt(this.getAttribute("data-value")));
    //     });

    //     star.addEventListener("mouseout", function () {
    //         updateStars(selectedRating);
    //     });
    // });

    // function updateStars(rating) {
    //     stars.forEach((star, index) => {
    //         star.classList.toggle("active", index < rating);
    //     });
    // }

    // // Handle Review Submission
    // submitRev.addEventListener("click", function (event) {
    //     event.preventDefault();

    //     if (selectedRating === 0) {
    //         showToast("Please select a star rating before submitting.", "error");
    //         return;
    //     }

    //     confirmModal.style.display = "flex"; // Show confirmation modal
    // });

    // // Confirm submission
    // confirmSubmit.addEventListener("click", function () {
    //     confirmModal.style.display = "none";
    //     reviewModal.style.display = "none"; // Hide review modal
    //     showToast("Review Submitted Successfully!");
    //     selectedRating = 0; // Reset rating
    //     updateStars(0);
    // });

    // // Cancel confirmation modal
    // cancelConfirm.addEventListener("click", function () {
    //     confirmModal.style.display = "none";
    // });

    // // Hide modal when clicking outside
    // window.addEventListener("click", function (event) {
    //     if (event.target === reviewModal) {
    //         reviewModal.style.display = "block";
    //     }
    //     if (event.target === confirmModal) {
    //         confirmModal.style.display = "none";
    //     }
    // });

    // // Toast Notification Function
    // function showToast(message, type = "success") {
    //     toast.innerText = message;
    //     toast.classList.add("show");

    //     // Apply different styles based on type
    //     if (type === "error") {
    //         toast.classList.add("error");
    //     } else {
    //         toast.classList.remove("error");
    //     }

    //     setTimeout(function () {
    //         toast.classList.remove("show");
    //     }, 3000);
    // }


    //logout
    document.addEventListener("DOMContentLoaded", function () {
        const logoutLink = document.getElementById("logout");
        const modal = document.getElementById("logout-modal");
        const confirmLogout = document.getElementById("confirm-logout");
        const cancelLogout = document.getElementById("cancel-logout");

        // Ensure modal starts hidden
        modal.style.display = "none";

        // Show modal when logout is clicked
        logoutLink.addEventListener("click", function (event) {
            event.preventDefault(); // Prevents default link behavior
            modal.style.display = "flex"; // Show modal only on click
        });

        // Redirect when "Yes" is clicked
        confirmLogout.addEventListener("click", function () {
            window.location.href = "/logout"; // Adjust logout URL
        });

        // Close modal when "No" is clicked
        cancelLogout.addEventListener("click", function () {
            modal.style.display = "none"; // Hide modal
        });
    });

    

        class RentalRequest {
            constructor(id) {
                this.id = id;
                this.acceptBtn = document.querySelector(`[data-id="accept-btn-${id}"]`);
                this.declineBtn = document.querySelector(`[data-id="decline-btn-${id}"]`);
                this.confirmationModal = document.getElementById("confirmation-modal1");
                this.declineConfirmationModal = document.getElementById("decline-confirmation-modal1");
                this.overlay = document.getElementById("overlay");
                this.successContainer = document.getElementById("success-container1");
                this.declineContainer = document.getElementById("decline-container1");

                this.reviewButton = document.querySelector(`[data-id="review-btn-${id}"]`)
                this.reviewDescription = document.querySelector('#review-description')
                this.reviewModal = document.querySelector('#review-modal')
                this.confirmReview = document.querySelector("confirm-review")
                this.confirmModal = document.getElementById("confirm-modal1")   

                // Getting the current data-id
                this.dataId = 0

                this.addEventListeners();
            }

            addEventListeners() {
                if (this.acceptBtn) {
                    this.acceptBtn.addEventListener("click", (event) => {
                        this.dataId = event.target.getAttribute('data-id').replace("accept-btn-", "");
                        this.showModal("accept");
                    })
                }

                if (this.declineBtn) {
                    this.declineBtn.addEventListener("click", () => {
                        this.dataId = event.target.getAttribute('data-id').replace("decline-btn-", "");
                        this.showModal("decline")
                    });
                }

                if (this.reviewButton) {
                    this.reviewButton.addEventListener('click', () => {
                        this.dataId = event.target.getAttribute('data-id').replace('review-btn-', '');
                        this.showModal('review-modal')
                    });
                }
            }

            showModal(action) {
                this.overlay.style.display = "block";

                if (action === "accept") {
                    this.confirmationModal.style.display = "block";
                    document.getElementById("yes-btn1").onclick = () => this.confirmAccept();
                    document.getElementById("no-btn1").onclick = () => this.hideModals();
                } else if (action === "decline") {
                    this.declineConfirmationModal.style.display = "block";
                    document.getElementById("decline-yes-btn1").onclick = () => this.confirmDecline();
                    document.getElementById("decline-no-btn1").onclick = () => this.hideModals();
                } else if (action === 'review-modal') {
                    this.reviewModal.style.display = "block";

                    document.getElementById('submit-rev').onclick = (event) => {
                        event.preventDefault();
                        if (!selectedRating) {
                        alert("Please provide a star rating.");
                        return;
                    }
                        document.getElementById('review-modal').style.display = "none";
                        document.getElementById('confirm-modal1').style.display = "block";
                        document.getElementById('modal-overlay').style.display = "block";
                    };

                    document.getElementById('cancel-rev').onclick = () => {
                        this.reviewModal.style.display = "none";
                        this.overlay.style.display = "none";
                    };
                }

                // Handle confirmation modal actions
                document.getElementById("confirm-review").onclick = async () => {
                    await this.submitReview(); // Submits the review
                    document.getElementById("confirm-modal1").style.display = "none"; // Hide confirm modal
                    document.getElementById("toast").classList.add("show");
                    document.getElementById("modal-overlay").style.display = "block";
                    
                    setTimeout(() => {
                        document.getElementById("toast").classList.remove("show");
                        document.getElementById("modal-overlay").style.display = "none";
                        // Optionally reload the page after submitting
                        window.location.reload();
                    }, 3000);
                };

                document.getElementById("cancel-review").onclick = () => {
                    document.getElementById('confirm-modal1').style.display = "none"; // Close confirm 
                    document.getElementById('modal-overlay').style.display = "none"; // Hide overlay
                    this.overlay.style.display = "none"; // Hide overlay
                };
            }


            async confirmAccept() {
                try {
                    await fetchWithAutoRefresh(`http://localhost:8000/api/user/my-items/rental-requests/approved`, {
                        method: "PATCH",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({rental_transaction_id: this.dataId}),
                    });
                } catch (error) {
                    alert(error.message);
                }
                this.confirmationModal.style.display = "none";
                this.successContainer.style.display = "block";

                setTimeout(() => {
                    this.overlay.style.display = "none";
                    this.successContainer.style.display = "none";

                    window.location.reload()
                }, 3000);
            }

            confirmDecline() {
                this.declineConfirmationModal.style.display = "none";
                this.declineContainer.style.display = "block";

                setTimeout(() => {
                    this.overlay.style.display = "none";
                    this.declineContainer.style.display = "none";
                }, 3000);
            }

            hideModals() {
                this.confirmationModal.style.display = "none";
                this.declineConfirmationModal.style.display = "none";
                this.overlay.style.display = "none";
                this.reviewModal.style.display = 'none'
            }

            async submitReview() {
                const rentTransactionId = this.dataId

                try {
                    await fetchWithAutoRefresh(`http://localhost:8000/api/user/my-requests/return-items/${rentTransactionId}`, {
                        method: 'PATCH',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            stars: selectedRating,
                            description: this.reviewDescription.value,
                        })
                    })

                    document.getElementById('toast').style.display = "block";
                    setTimeout(() => {
                        document.getElementById('toast').style.display = "none";
                    }, 3000);
                } catch (error) {
                    alert(error.message);
                }

                this.reviewModal.style.display = "none";

                setTimeout(() => {
                    this.overlay.style.display = "none";
                    this.successContainer.style.display = "none";

                    window.location.reload()
                }, 3000);

            }
        }

        function setItemId(button) {
            selectedItemId = button.getAttribute('data-selected-item-id')
            selectedUserId = button.getAttribute('data-selected-user-id')
        }

        // Initialize rental requests for existing items
        document.querySelectorAll(".review-btn").forEach((button) => {
            const id = button.dataset.id.split("-").pop(); // Extracts the unique ID from data-id
            new RentalRequest(id);
        });

        // Star Rating System
        const stars = document.querySelectorAll(".star2");
        let selectedRating = 0;

        stars.forEach((star) => {
            star.addEventListener("click", function () {
                selectedRating = parseInt(this.getAttribute("data-value")); // Store the selected rating
                updateStars(selectedRating);
            });

            star.addEventListener("mouseover", function () {
                updateStars(parseInt(this.getAttribute("data-value")));
            });

            star.addEventListener("mouseout", function () {
                updateStars(selectedRating);
            });
        });

        function updateStars(rating) {
            stars.forEach((star, index) => {
                star.classList.toggle("active", index < rating);
            });
        }

// Report Modal Functionality
class ReportManager {
    constructor(options = {}) {
        this.reportButtons = document.querySelectorAll('[data-id="report-btn"]');
        this.reportModal = document.getElementById("report-modal");
        this.modalOverlay = document.getElementById("modal-overlay");
        this.submitReportBtn = document.getElementById("submit-rprt");
        this.cancelReportBtn = document.getElementById("cancel-rprt");
        this.confirmModal = document.getElementById("confirm-modal");
        this.confirmSubmitBtn = document.getElementById("confirm-submit");
        this.cancelConfirmBtn = document.getElementById("cancel-confirms");
        this.toast = document.getElementById("report-toast");
        this.reportErrorModal = document.getElementById("errorModal"); // Changed to match your HTML
        
        // Store the logged in user ID from options
        this.currentLoggedInUserId = options.loggedInUserId || null;

        this.selectedItemId = null;
        this.selectedUserId = null;
        this.selectedReasons = [];
        this.description = "";
        this.triggeringButton = null;

        // Initialize event handlers
        this.initialize();
    }

    initialize() {
        this.reportButtons.forEach(btn => {
            btn.addEventListener("click", () => {
                this.setItemIds(btn);
                this.triggeringButton = btn;

                if (this.alreadyReported(btn)) {
                    this.showErrorModal(); // Show error modal if already reported
                } else {
                    this.showModal();
                }
            });
        });

        this.submitReportBtn.addEventListener("click", (e) => this.handleFormSubmit(e));
        this.cancelReportBtn.addEventListener("click", () => this.hideModal());
        this.confirmSubmitBtn.addEventListener("click", (e) => this.submitReport(e));
        this.cancelConfirmBtn.addEventListener("click", () => {
            this.hideConfirmModal();
            this.modalOverlay.style.display = "none";
        });

        this.modalOverlay.addEventListener("click", () => {
            this.hideModal();
            this.hideConfirmModal();
            this.hideErrorModal();
        });

        // Add event listener for the close button in error modal
        const errorModalCloseBtn = document.querySelector("#errorModal .close-button");
        if (errorModalCloseBtn) {
            errorModalCloseBtn.addEventListener("click", () => this.hideErrorModal());
        }
    }

    showErrorModal() {
        this.reportErrorModal.style.display = "flex";
        this.modalOverlay.style.display = "block";
    }

    hideErrorModal() {
        this.reportErrorModal.style.display = "none";
        this.modalOverlay.style.display = "none";
    }

    alreadyReported(button) {
        const alreadyReportedValue = button.getAttribute('data-already-reported');
        return alreadyReportedValue === 'true';
    }

    setItemIds(button) {
        this.selectedItemId = button.getAttribute('data-selected-item-id');
        this.selectedUserId = button.getAttribute('data-selected-user-id');
    }

    showModal() {
        this.reportModal.style.display = "block";
        this.modalOverlay.style.display = "block";
    }

    hideModal() {
        this.reportModal.style.display = "none";
        this.modalOverlay.style.display = "none";
        
        // Reset form when hiding modal
        const checkboxes = document.querySelectorAll('input[name="reason"]:checked');
        checkboxes.forEach(cb => cb.checked = false);
        document.querySelector("textarea[name='description']").value = "";
    }

    showConfirmModal() {
        this.confirmModal.style.display = "block";
        this.modalOverlay.style.display = "block";
    }

    hideConfirmModal() {
        this.confirmModal.style.display = "none";
        this.modalOverlay.style.display = "none";
        
    }

    showToast() {
        this.modalOverlay.style.display = "block";
        this.toast.classList.add("show");
        setTimeout(() => {
            this.toast.classList.remove("show");
            this.modalOverlay.style.display = "none";
        }, 3000);
    }

    handleFormSubmit(event) {
        event.preventDefault();
        const checkboxes = document.querySelectorAll('input[name="reason"]:checked');
        const descriptionValue = document.querySelector("textarea[name='description']").value;

        if (checkboxes.length > 0) {
            this.selectedReasons = Array.from(checkboxes).map(cb => cb.value);
            this.description = descriptionValue;
            this.hideModal();
            this.showConfirmModal();
        } else {
            alert("Please select at least one reason before confirming.");
        }
    }

    async submitReport(event) {
        event.preventDefault();

        try {
            const response = await fetchWithAutoRefresh('http://localhost:8000/api/admin/my-items/reports', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    item_id: this.selectedItemId,
                    reported_user_id: this.selectedUserId,
                    reporter_id: this.currentLoggedInUserId,
                    reasons: this.selectedReasons,
                    report_text: this.description
                }),
            });

            if (response.ok) {
                this.hideConfirmModal();
                this.showToast();
                
                // Update the button's data attribute to indicate this item has been reported
                if (this.triggeringButton) {
                    this.triggeringButton.setAttribute('data-already-reported', 'true');
                }
            } else if (response.status === 409) {
                this.hideConfirmModal();
                this.showErrorModal();
                
                // Update the button's data attribute
                if (this.triggeringButton) {
                    this.triggeringButton.setAttribute('data-already-reported', 'true');
                }
            } else {
                console.error('An unexpected error occurred.');
            }
        } catch (error) {
            console.error('Error submitting report:', error);
        }
    }
}

document.addEventListener("DOMContentLoaded", () => {
    const reportManager = new ReportManager({ loggedInUserId: currentLoggedInUserId });
});

// Global function to close error modal
window.closeErrorModal = function() {
    const errorModal = document.getElementById('errorModal');
    const modalOverlay = document.getElementById('modal-overlay');
    
    if (errorModal) errorModal.style.display = 'none';
    if (modalOverlay) modalOverlay.style.display = 'none';
}
</script>